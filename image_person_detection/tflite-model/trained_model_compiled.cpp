/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 20.05.2022 12:43:07

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 241408;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[71];
TfLiteEvalTensor tflEvalTensors[71];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 50,-4,34, -2,-24,18, -127,-127,-67, 
  /* [1][1][][] */ 5,-5,0, -20,3,-5, 8,-28,8, 
  /* [1][2][][] */ -5,14,-6, -6,5,-6, 44,-19,11, 
  /* [2][0][][] */ 27,-5,-6, 73,113,3, 44,-33,13, 
  /* [2][1][][] */ 9,14,1, 70,127,-24, 25,1,0, 
  /* [2][2][][] */ 48,-63,22, 75,-40,-17, 38,-47,21, 
  /* [3][0][][] */ 10,39,4, 37,99,20, -1,3,-8, 
  /* [3][1][][] */ 25,42,5, 67,127,21, -17,-23,-2, 
  /* [3][2][][] */ 6,4,1, 26,26,3, -5,-7,-2, 
  /* [4][0][][] */ 38,74,-13, 15,83,-17, -8,16,0, 
  /* [4][1][][] */ 35,84,41, 21,110,19, 34,56,-16, 
  /* [4][2][][] */ 65,93,45, 54,127,14, -16,29,26, 
  /* [5][0][][] */ 3,-3,-113, -7,-3,-94, -1,33,-16, 
  /* [5][1][][] */ -4,-49,-127, -5,-45,-103, 3,19,-11, 
  /* [5][2][][] */ -7,6,-14, 1,0,-4, 7,22,1, 
  /* [6][0][][] */ 23,-65,32, 47,-88,38, 8,-21,8, 
  /* [6][1][][] */ 36,-97,60, 64,-127,70, 6,-29,16, 
  /* [6][2][][] */ 21,-35,12, 16,-43,26, -13,7,-1, 
  /* [7][0][][] */ -26,16,3, -101,-43,-3, -26,18,-5, 
  /* [7][1][][] */ -10,-11,-2, -127,-102,-12, -11,-12,-3, 
  /* [7][2][][] */ -20,28,-10, -13,6,-5, -25,19,-11, 
  /* [8][0][][] */ -73,-70,117, -71,-68,116, 120,123,117, 
  /* [8][1][][] */ -53,99,117, 67,111,116, 124,126,116, 
  /* [8][2][][] */ 121,125,118, 121,126,117, 125,127,117, 
  /* [9][0][][] */ -18,0,11, -10,-3,1, 8,7,-8, 
  /* [9][1][][] */ 98,115,-12, 72,127,14, -5,24,29, 
  /* [9][2][][] */ -28,-26,14, 0,-33,-2, 10,4,-19, 
  /* [10][0][][] */ -24,-83,-18, 34,95,20, -8,-13,-2, 
  /* [10][1][][] */ -59,-103,-13, 79,127,15, -17,-26,0, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -8,-1,8, 
  /* [11][0][][] */ 0,-9,12, 20,-22,18, 29,-62,-21, 
  /* [11][1][][] */ -30,-26,-5, -21,-43,-21, 6,-29,-23, 
  /* [11][2][][] */ 15,-11,-43, 118,127,75, -7,38,-12, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-96,-17, -61,-110,-24, -9,-17,-5, 
  /* [13][1][][] */ 61,114,16, 57,127,25, 7,16,11, 
  /* [13][2][][] */ -8,-19,3, 1,-18,-1, 0,4,-4, 
  /* [14][0][][] */ 48,-3,-32, 80,-23,-46, 33,-7,-17, 
  /* [14][1][][] */ 90,-14,-69, 127,-37,-84, 59,-17,-35, 
  /* [14][2][][] */ 56,-8,-43, 74,-19,-49, 26,-6,-16, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant2_scale = { 16, { 3.3410194077987398e-07, 0.050171747803688049, 0.040713999420404434, 0.0098797548562288284, 0.002698816591873765, 0.053432207554578781, 0.029627591371536255, 0.054634064435958862, 0.0012134449789300561, 0.01167756412178278, 0.031307961791753769, 0.0096456948667764664, 2.9411381774480105e-07, 0.03223244845867157, 0.01977463997900486, 3.1706054670621597e-08, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { -1073741824, 15766, -112071, 19556, 295961, 21455, 33639, 11987, -166462, 34233, 23803, 136231, -1073741824, 29808, 26989, -1073741824, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 1.3102037232926023e-09, 0.00019675196381285787, 0.00015966275532264262, 3.874413960147649e-05, 1.0583595212665386e-05, 0.00020953807688783854, 0.00011618663847912103, 0.00021425123850349337, 4.7586081564077176e-06, 4.5794371544616297e-05, 0.00012277632777113467, 3.7826255720574409e-05, 1.1533876076441629e-09, 0.00012640176282729954, 7.7547614637296647e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,50,-105,5,127,-25, 24,-24,90,-2,-72,68,-94,78,-95,-27,4,-14,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-43,16,-28,14,-28,1,3,-108,-49,8,-30,-14, -78,-41,-57,-15,-7,-26,8,-27,-108,-89,21,-13,-104,-127,1,23, 14,1,64,2,3,34,-25,33,-127,7,-2,2,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,68,2,-6,39,-39,52,-76,0,0,3,40,2,-27,23, 23,-4,31,-2,-27,40,-34,21,-125,-13,0,82,-58,0,-29,-111, 21,-7,19,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.079427838325500488, 0.0047546299174427986, 0.0033925294410437346, 0.013162156566977501, 0.0066500212997198105, 0.0018076730193570256, 0.015505893155932426, 0.0040761679410934448, 0.00089073862181976438, 0.011504798196256161, 0.0083961812779307365, 0.030654720962047577, 0.030907778069376945, 0.010177860967814922, 0.0079803336411714554, 0.16606816649436951, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { -161, 23254, 50370, 11224, 11195, 78194, 13966, 40551, -11376, 6447, 29734, 14912, -445, 26582, 11025, -107, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0018688903655856848, 0.00011187364725628868, 7.982422539498657e-05, 0.00030969781801104546, 0.00015647109830752015, 4.2533483792794868e-05, 0.00036484454176388681, 9.5909832452889532e-05, 2.095855597872287e-05, 0.00027070112992078066, 0.00019755720859393477, 0.00072128756437450647, 0.00072724185883998871, 0.00023947907902766019, 0.00018777255900204182, 0.003907486330717802, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ 0,-20,4,-3,123,-3,-2,-3,1,-127,-86,-4,0,116,-3,0, 
  /* [1][0][][] */ 0,-27,-2,89,74,12,21,4,1,-7,127,-42,0,27,-11,0, 
  /* [2][0][][] */ 0,0,-4,-12,-58,4,11,0,0,3,-18,-1,0,127,-8,0, 
  /* [3][0][][] */ 0,-7,-12,-127,83,19,73,12,1,60,-1,44,0,-4,25,0, 
  /* [4][0][][] */ 0,47,-25,36,-54,26,127,0,-1,-60,16,-9,0,-4,15,0, 
  /* [5][0][][] */ 0,-15,-7,-2,-22,-24,-10,13,1,10,-4,-47,0,-4,127,0, 
  /* [6][0][][] */ 0,15,3,2,50,-17,-22,-3,2,-110,116,66,0,127,64,0, 
  /* [7][0][][] */ 0,13,-12,127,7,-1,19,12,1,70,-53,77,0,-8,51,0, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.10133618861436844, 0.10031704604625702, 0.10461732745170593, 0.047927185893058777, 0.054274953901767731, 0.081455014646053314, 0.061365775763988495, 0.041109833866357803, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 267, -41921, -7352, -14449, -30326, -2734, -27999, -29069, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0023843809030950069, 0.0023604012094438076, 0.002461584284901619, 0.0011276984587311745, 0.0012770578032359481, 0.0019165886333212256, 0.0014439006336033344, 0.0009672902524471283, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ 18,-127,48,-38,24,-15,-47,21, 
  /* [1][0][][] */ 66,71,-20,-99,12,-7,-78,127, 
  /* [2][0][][] */ 25,12,-37,127,53,116,48,86, 
  /* [3][0][][] */ 76,63,-86,127,-93,-12,2,18, 
  /* [4][0][][] */ -38,-110,78,10,16,30,-39,-127, 
  /* [5][0][][] */ 18,6,-44,48,2,-37,36,127, 
  /* [6][0][][] */ 53,-18,-127,-96,106,-7,55,-41, 
  /* [7][0][][] */ 127,18,21,-22,30,-7,82,-61, 
  /* [8][0][][] */ 25,-105,5,112,-8,32,2,-127, 
  /* [9][0][][] */ 98,-127,11,-2,-14,16,-117,80, 
  /* [10][0][][] */ -127,-49,-120,25,-5,0,-118,58, 
  /* [11][0][][] */ -27,-41,-8,-107,-127,-41,44,-16, 
  /* [12][0][][] */ 10,2,-42,69,-68,-19,56,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -5,-34,-4,13,53,127,43,40, 
  /* [15][0][][] */ 49,-1,12,-127,70,42,-59,82, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 14,23,127,20,-31,-8,27,25, 
  /* [18][0][][] */ 89,-127,32,31,-15,21,-127,-6, 
  /* [19][0][][] */ -127,-15,34,73,-50,-67,-93,69, 
  /* [20][0][][] */ 34,24,-45,102,-27,-127,-5,66, 
  /* [21][0][][] */ 62,24,127,11,-9,-8,62,14, 
  /* [22][0][][] */ -81,-11,-127,0,10,10,-108,4, 
  /* [23][0][][] */ -109,127,-22,-23,9,-17,126,-81, 
  /* [24][0][][] */ 6,-55,-50,78,-11,-54,95,127, 
  /* [25][0][][] */ 13,47,26,27,127,116,-72,-51, 
  /* [26][0][][] */ -78,-30,-127,-3,5,14,-96,-1, 
  /* [27][0][][] */ 2,-32,-25,12,-41,127,78,48, 
  /* [28][0][][] */ -2,-26,-28,37,21,127,57,66, 
  /* [29][0][][] */ 74,38,127,-9,-30,-17,81,-14, 
  /* [30][0][][] */ -79,127,-28,-33,1,-6,104,-48, 
  /* [31][0][][] */ -43,-102,-18,6,37,-75,127,121, 
  /* [32][0][][] */ 9,5,-41,127,-12,103,84,113, 
  /* [33][0][][] */ 2,65,-7,-107,4,-10,-5,127, 
  /* [34][0][][] */ -23,88,-6,-97,22,-8,10,127, 
  /* [35][0][][] */ 127,14,-7,-36,18,25,89,-39, 
  /* [36][0][][] */ -127,4,27,62,-29,12,-122,90, 
  /* [37][0][][] */ -5,-25,-9,18,18,127,49,43, 
  /* [38][0][][] */ 15,23,5,82,127,-11,-19,40, 
  /* [39][0][][] */ 0,28,41,-127,23,-9,-35,123, 
  /* [40][0][][] */ 100,21,127,8,-7,-6,87,-2, 
  /* [41][0][][] */ 2,-27,-30,87,56,127,68,103, 
  /* [42][0][][] */ -78,-6,127,20,-37,15,-31,60, 
  /* [43][0][][] */ -9,-54,6,101,-18,6,18,-127, 
  /* [44][0][][] */ 52,-13,-49,-127,54,-35,2,-100, 
  /* [45][0][][] */ -81,127,4,-51,9,9,71,-56, 
  /* [46][0][][] */ -127,-24,40,29,-28,34,-91,43, 
  /* [47][0][][] */ 100,17,116,-2,34,-32,127,-15, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0010303646558895707, 0.00099687243346124887, 0.00064911460503935814, 0.00062876229640096426, 0.00055573449935764074, 0.0005528242327272892, 0.00087380327749997377, 0.0031118604820221663, 0.0008273290004581213, 0.0049156402237713337, 0.0012012023944407701, 0.0035669063217937946, 0.0003582271165214479, 3.937008052901092e-09, 0.0018922726158052683, 0.00032192983780987561, 3.937008052901092e-09, 0.013265730813145638, 0.00083026936044916511, 0.00091430731117725372, 0.00056921230861917138, 0.0088245365768671036, 0.00062233075732365251, 0.0028561616782099009, 0.0019161736126989126, 0.0012770516332238913, 0.0044739739969372749, 0.003617406589910388, 0.00052369857439771295, 0.0032926073763519526, 0.0023207967169582844, 0.00026003780658356845, 0.00037351460196077824, 0.021264081820845604, 0.0010490479180589318, 0.0014328483957797289, 0.011099658906459808, 0.00083991041174158454, 0.0048102671280503273, 0.00063233502442017198, 0.0024097703862935305, 0.00033380190143361688, 0.0012481509475037456, 0.020252786576747894, 0.00087890302529558539, 0.0010165857383981347, 0.00071697245584800839, 0.00039938237750902772, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 4315, 31, 10237, 6135, 7644, 7946, 9128, -44, 42, -321, 2587, 470, 12717, -86834352, 2901, 21780, -70097192, -115, -466, 8939, 3742, -14, 10, 458, 4127, -893, 80, 700, 4511, 1886, 2675, 19227, 4380, 320, 234, -1772, 287, 3159, -160, 11670, 2492, 13977, -272, -85, 11969, 203, 8263, 4707, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00048881012480705976, 0.00047292123781517148, 0.00030794317717663944, 0.00029828795231878757, 0.00026364318910054862, 0.00026226256159134209, 0.00041453659650869668, 0.0014762820210307837, 0.00039248898974619806, 0.0023320040199905634, 0.0005698563763871789, 0.0016921580536291003, 0.00016994471661746502, 1.8677361879326781e-09, 0.00089770351769402623, 0.0001527251151856035, 1.8677361879326781e-09, 0.0062933284789323807, 0.00039388390723615885, 0.0004337519349064678, 0.00027003715513274074, 0.0041864039376378059, 0.00029523679404519498, 0.0013549772556871176, 0.00090904225362464786, 0.00060583965387195349, 0.0021224755328148603, 0.0017161156283691525, 0.00024844519793987274, 0.0015620292397215962, 0.0011009974405169487, 0.00012336322106420994, 0.00017719717288855463, 0.010087786242365837, 0.00049767352174967527, 0.00067975040292367339, 0.0052657332271337509, 0.00039845766150392592, 0.0022820145823061466, 0.00029998287209309638, 0.0011432070750743151, 0.00015835727390367538, 0.00059212901396676898, 0.0096080228686332703, 0.00041695596883073449, 0.000482273317174986, 0.00034013530239462852, 0.00018946897762361914, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -42,-22,-7,-16,7,-40,-79,-67,-28,-50,9,68,35,-71,115,-43,-113,-84,37,-7,-1,-74,-111,-79,-35,-125,-65,-22,70,16,96,26,-127,-89,-7,52,18,48,-127,79,-76,-13,104,-109,-3,-35,-87,108, 76,12,-28,-28,57,-127,-127,-81,60,-77,-115,109,37,-82,-1,62,-52,-114,59,6,9,-111,-127,-70,-4,-127,-119,-41,-54,22,-56,54,29,-127,64,82,13,73,-92,127,-127,6,123,-127,1,-23,-127,95, -31,43,5,-5,-66,-109,-59,-18,88,-8,-127,38,8,-71,-101,-12,-127,-26,27,11,-15,-79,-35,-23,-10,-30,-59,-14,-9,18,-25,9,108,-88,70,30,13,36,-6,16,-78,4,7,-79,-18,5,-55,15, 
  /* [0][1][][] */ -85,-127,-45,-44,-10,55,99,-106,-26,-109,-21,114,91,-64,27,-97,-121,-96,90,-76,42,-88,-103,-127,42,-120,-77,-39,127,-60,127,83,-43,-84,-15,85,-37,-77,-108,90,43,59,104,-110,-92,-117,81,119, 127,-83,-127,-127,127,42,93,-127,100,-127,-111,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-119,-119,127,-97,-127,-127,-119,-127,-70,127,29,-112,127,127,-69,-127,-98,90,62,127,127,-115,-114,-127,123,127, -52,31,-62,-85,-122,-22,30,-38,127,-19,-77,34,56,-70,-26,-44,-37,-31,54,-71,58,-82,-39,-24,49,-6,-47,-60,16,-89,-37,19,31,-99,117,24,-37,-62,-1,-15,37,53,10,-75,-59,-38,64,35, 
  /* [0][2][][] */ -60,-107,-33,-32,0,34,-5,-35,-38,-59,-17,61,75,-127,-127,-64,-43,-18,65,74,51,-37,-12,-60,31,-54,-11,-59,75,29,77,63,110,-25,-38,-11,-95,35,-18,29,10,37,15,-56,96,-77,3,32, 88,-74,-87,-82,81,19,6,-46,47,-71,-33,55,80,-26,16,92,-24,-30,77,116,78,-56,-19,-57,91,-65,-19,-97,-51,40,-46,113,-18,-48,67,5,-127,50,-15,-2,11,32,16,-66,127,-100,-13,41, -28,30,-41,-34,-81,-20,21,-12,57,-5,-14,31,30,-43,112,-30,-93,-6,31,59,72,-31,-2,-3,41,2,-5,-61,-13,28,-21,40,-91,-42,65,3,-20,21,26,-39,8,36,-5,-14,62,-36,-5,18, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0032837311737239361, 0.0027956189587712288, 0.0079825427383184433, 0.0044850315898656845, 0.006004472728818655, 0.0075150472111999989, 0.0056518577039241791, 0.0024751531891524792, 0.003706199349835515, 0.0013765612384304404, 0.0037362151779234409, 0.0013623973354697227, 0.0073400149121880531, 0.23551659286022186, 0.0034941127523779869, 0.0093126082792878151, 0.1168077290058136, 0.0008285176008939743, 0.0042964005842804909, 0.0060468781739473343, 0.004555980209261179, 0.0058358935639262199, 0.0056003564968705177, 0.0015211778227239847, 0.0040474478155374527, 0.004957487341016531, 0.0014616242842748761, 0.0017987181199714541, 0.011649296618998051, 0.0022207642905414104, 0.0018130621174350381, 0.010626532137393951, 0.010305683128535748, 0.00034551465068943799, 0.0036389725282788277, 0.007411658763885498, 0.0005574048263952136, 0.020280230790376663, 0.0014799925265833735, 0.0034160849172621965, 0.0026755123399198055, 0.010139863006770611, 0.004249227698892355, 0.00037390852230601013, 0.008728797547519207, 0.0037492942065000534, 0.0087447678670287132, 0.0054219518788158894, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 76741, 60653, 61146, 41412, 549, 13470, 3838, 28488, 25398, 27012, 30668, 4153, -45290, -127, 30876, 895, -204, 28370, 1361, 2724, -13988, 1184, 44950, 33929, -20264, 24831, 42481, 21496, -2703, 13097, -8216, -51434, 9845, 106173, 29184, 1550, 66344, -63, 133817, -22654, 11992, -28320, 2751, 108040, 247, 67825, 1772, -22456, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 7.7264267019927502e-05, 6.5779269789345562e-05, 0.00018782453844323754, 0.00010553015454206616, 0.00014128170732874423, 0.00017682464385870844, 0.00013298488920554519, 5.8238900237483904e-05, 8.7204694864340127e-05, 3.2389678381150588e-05, 8.7910950242076069e-05, 3.2056406780611724e-05, 0.0001727062335703522, 0.005541567225009203, 8.221442112699151e-05, 0.00021912019292358309, 0.0027484172023832798, 1.9494531443342566e-05, 0.0001010917840176262, 0.00014227948850020766, 0.00010719953570514917, 0.000137315146275796, 0.00013177309301681817, 3.5792421840596944e-05, 9.5234070613514632e-05, 0.00011664676276268438, 3.4391159715596586e-05, 4.2322779336245731e-05, 0.0002741010976023972, 5.2253279136493802e-05, 4.266028554411605e-05, 0.00025003604241646826, 0.00024248666886705905, 8.1297566794091836e-06, 8.5622887127101421e-05, 0.0001743919710861519, 1.311540836468339e-05, 0.00047718192217871547, 3.4823355235857889e-05, 8.0378471466246992e-05, 6.2953229644335806e-05, 0.00023858500935602933, 9.99818294076249e-05, 8.7978478404693305e-06, 0.00020538347598630935, 8.8218686869367957e-05, 0.00020575925009325147, 0.00012757534568663687, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -10,3,10,-88,12,32,4,8,1,5,-1,-6,96,0,1,7,0,-5,-4,-2,80,1,2,6,32,39,10,11,2,3,2,-127,12,7,-2,-1,-26,3,-18,30,6,-23,-10,6,2,-1,2,1, 
  /* [1][0][][] */ -38,-6,-4,-7,43,30,-25,74,21,9,-30,-25,13,0,17,35,0,40,19,-48,2,24,127,21,-24,6,57,3,22,-4,16,-10,14,-5,-10,-17,4,-49,14,2,-8,-7,-77,-7,-31,5,-48,-93, 
  /* [2][0][][] */ -57,17,-4,13,39,-8,26,25,-10,57,11,-10,5,0,8,47,0,14,-127,23,-2,16,8,-13,-29,7,41,2,4,24,18,6,6,-3,-13,-12,11,4,6,3,34,-5,-29,0,23,-51,18,16, 
  /* [3][0][][] */ 0,1,-2,8,-6,27,2,-1,65,20,-3,-3,26,0,-29,-9,0,1,-9,-4,-3,-1,7,-18,-10,-7,-8,-4,-8,-5,0,-7,-47,43,-55,-4,9,3,1,-127,-3,6,-2,-46,-5,0,-3,3, 
  /* [4][0][][] */ 3,-1,83,35,4,-20,-9,-4,2,-6,-5,-1,-76,0,-9,3,0,15,3,2,67,6,1,-5,-14,34,-12,47,-5,0,2,104,2,4,-1,1,19,-18,-9,-19,1,-127,0,3,-1,-2,0,2, 
  /* [5][0][][] */ -7,43,2,-8,2,48,26,12,-18,32,9,53,28,0,-127,-2,0,15,-38,20,-7,11,-10,40,-19,0,31,-3,-14,23,26,-15,49,30,-40,-4,6,19,-48,15,21,-12,-11,30,19,59,22,24, 
  /* [6][0][][] */ -21,-57,-1,4,38,-44,-20,12,29,-21,-8,89,-1,0,-127,38,0,-8,45,-22,-6,2,29,-33,32,-2,-1,-12,45,-17,-10,-4,92,-27,25,-1,-2,-12,-73,-22,-15,-14,-4,-29,-25,-83,-21,-27, 
  /* [7][0][][] */ -115,-24,-15,9,127,24,69,26,13,8,36,-41,-27,0,93,108,0,12,-3,61,-10,-5,-24,48,22,13,54,3,50,58,56,-4,-8,-16,-20,-23,9,28,26,39,73,6,-26,-9,65,3,68,89, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.062442291527986526, 0.027972565963864326, 0.06020282581448555, 0.049887631088495255, 0.047635685652494431, 0.048523470759391785, 0.034118745476007462, 0.032636374235153198, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { -6295, -26469, 20757, 21989, 1215, 406, 37167, 5408, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.0014692303957417607, 0.00065817806171253324, 0.0014165370957925916, 0.0011738266330212355, 0.0011208397336304188, 0.0011417287169024348, 0.00080279400572180748, 0.00076791469473391771, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 97,29,4,-13,127,25,-55,-33, 
  /* [1][0][][] */ -10,-4,2,127,12,-10,2,16, 
  /* [2][0][][] */ 20,-127,-14,32,-8,-58,65,12, 
  /* [3][0][][] */ 127,-31,-10,19,-14,-30,31,3, 
  /* [4][0][][] */ 8,-55,127,-19,-17,-38,1,-105, 
  /* [5][0][][] */ 70,5,1,2,127,14,-9,-8, 
  /* [6][0][][] */ -15,91,-23,127,27,52,-80,-49, 
  /* [7][0][][] */ -3,127,-7,2,0,-19,22,5, 
  /* [8][0][][] */ 127,43,-10,9,-44,-23,15,-36, 
  /* [9][0][][] */ -127,22,26,28,42,14,-27,-3, 
  /* [10][0][][] */ -76,-6,23,127,42,29,-22,-7, 
  /* [11][0][][] */ -127,-7,16,-70,44,7,-30,-43, 
  /* [12][0][][] */ 127,28,0,11,-52,-6,2,-46, 
  /* [13][0][][] */ -6,76,-127,-6,1,104,-67,66, 
  /* [14][0][][] */ -66,-26,-7,127,15,9,-10,-25, 
  /* [15][0][][] */ -1,127,0,-3,0,-15,7,-50, 
  /* [16][0][][] */ -8,-127,-31,4,-7,-115,119,-26, 
  /* [17][0][][] */ 20,127,-6,-12,8,67,-79,-11, 
  /* [18][0][][] */ -7,35,-127,-5,11,47,-25,65, 
  /* [19][0][][] */ -64,11,4,-1,-127,4,6,28, 
  /* [20][0][][] */ -127,-26,-5,6,89,-30,52,-2, 
  /* [21][0][][] */ -68,-1,-1,-3,-127,-2,20,12, 
  /* [22][0][][] */ -127,-32,4,0,92,-14,43,53, 
  /* [23][0][][] */ -23,-28,-9,-13,0,75,-127,-81, 
  /* [24][0][][] */ -9,40,-127,1,10,49,-21,74, 
  /* [25][0][][] */ 80,-35,-12,127,-88,-20,1,-49, 
  /* [26][0][][] */ 5,-12,0,6,-17,127,125,-36, 
  /* [27][0][][] */ 74,-15,-4,6,127,28,39,-12, 
  /* [28][0][][] */ -1,127,-56,7,0,86,-37,109, 
  /* [29][0][][] */ -11,16,-2,-13,2,93,-127,-94, 
  /* [30][0][][] */ 3,-8,5,-127,-3,2,-3,-9, 
  /* [31][0][][] */ -49,3,-6,4,-127,1,6,5, 
  /* [32][0][][] */ -19,21,5,-127,-8,45,-69,-98, 
  /* [33][0][][] */ -53,-8,1,1,-127,52,36,0, 
  /* [34][0][][] */ -127,66,3,20,37,-26,14,6, 
  /* [35][0][][] */ -16,127,-13,-15,14,-85,88,-26, 
  /* [36][0][][] */ -6,35,10,-30,1,100,-127,-26, 
  /* [37][0][][] */ 35,-87,-1,20,25,-127,121,-13, 
  /* [38][0][][] */ 30,-127,3,7,11,57,-48,63, 
  /* [39][0][][] */ 2,-127,-16,-5,0,-13,-42,-88, 
  /* [40][0][][] */ 121,61,12,0,-39,93,-125,-127, 
  /* [41][0][][] */ 13,-123,19,-5,-7,88,-68,127, 
  /* [42][0][][] */ 42,-12,8,-127,-44,0,-9,-22, 
  /* [43][0][][] */ -92,-23,18,-127,50,19,-24,-15, 
  /* [44][0][][] */ 5,-35,-2,14,-19,86,127,0, 
  /* [45][0][][] */ -127,-44,1,-9,-4,3,26,-5, 
  /* [46][0][][] */ 17,92,127,-4,-12,18,5,16, 
  /* [47][0][][] */ 3,5,12,127,15,9,9,-4, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00020722186309285462, 0.00076962867751717567, 0.00067977886646986008, 0.0010670183692127466, 0.0033979939762502909, 0.0013810144737362862, 0.0024956110864877701, 0.0027075894176959991, 0.0014492552727460861, 0.0014257555594667792, 0.0016087238909676671, 0.00108980608638376, 0.0011739147594198585, 0.0015118012670427561, 0.0014204668113961816, 0.0042459592223167419, 0.00080758164403960109, 0.0010515803005546331, 0.0048619145527482033, 0.00029297187575139105, 0.00058650260325521231, 0.001010278589092195, 0.0010303675662726164, 0.0025818564463406801, 0.00088741118088364601, 0.00054544210433959961, 0.00037749347393400967, 0.00094713573344051838, 0.0023173727095127106, 0.0024663100484758615, 0.0013476167805492878, 0.0010351594537496567, 0.0026969404425472021, 0.00062887294916436076, 0.00090690364595502615, 0.00058160471962764859, 0.0013346675550565124, 0.00074175081681460142, 0.00025240372633561492, 0.0060031628236174583, 0.0013739092973992229, 0.0023313448764383793, 0.0011715082218870521, 0.00092136766761541367, 0.00064925197511911392, 0.0011902941623702645, 0.0018262324156239629, 0.0024263935629278421, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 55939, 7961, 6209, 8187, 1787, 9818, -2094, -294, 1026, 2554, 3776, 399, 2275, -844, 806, -2319, 5452, 10799, -287, 24887, 5707, 2556, 10443, -552, 3617, 5740, 28905, 10342, -85, -2847, 112, 2239, -1966, 9453, 3075, 8781, 7360, 4994, 25034, 2036, -1163, 3166, 1131, 4410, 5005, 2441, -1683, 2935, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 7.6893811638001353e-05, 0.00028558608028106391, 0.00025224551791325212, 0.00039593846304342151, 0.0012608935358002782, 0.00051245297072455287, 0.00092604634119197726, 0.0010047050891444087, 0.00053777510765939951, 0.00052905507618561387, 0.0005969491321593523, 0.00040439431904815137, 0.00043560451013036072, 0.00056098407367244363, 0.0005270925466902554, 0.001575547968968749, 0.00029966930742375553, 0.00039020986878313124, 0.0018041104776784778, 0.00010871306585613638, 0.00021763349650427699, 0.00037488405359908938, 0.00038233844679780304, 0.00095804937882348895, 0.0003292916517239064, 0.00020239719015080482, 0.00014007648860570043, 0.00035145363654009998, 0.00085990742081776261, 0.00091517361579462886, 0.00050006009405478835, 0.00038411657442338765, 0.0010007536038756371, 0.00023335586593020707, 0.0003365247102919966, 0.00021581604960374534, 0.00049525505164638162, 0.00027524144388735294, 9.3659444246441126e-05, 0.0022275934461504221, 0.00050981645472347736, 0.00086509209359064698, 0.00043471151730045676, 0.00034189186408184469, 0.00024091791419778019, 0.00044168240856379271, 0.00067765999119728804, 0.00090036180336028337, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,21,108,4,80,-1,28,15,8,9,8,-9,-8,-45,8,-1,8,-24,-114,-7,-23,127,-10,-2,7,-5,9,-5,5,16,99,20,28,39,-27,1,35,-2,3,18,-67,-8,-9,17,3,-8,-10, 127,10,16,-127,28,85,11,11,123,127,6,44,-52,-24,6,8,127,-56,-60,-56,-101,25,-109,14,17,70,-31,-83,23,21,10,-124,6,-60,127,10,-39,-46,-7,117,-78,-97,-29,3,-33,-7,-127,23, -32,-3,8,15,0,63,4,18,26,8,-15,32,-15,-3,16,4,-103,28,-3,79,-32,-11,-18,-6,-4,-61,-3,29,-17,5,5,-22,8,-22,17,-19,0,48,40,-11,50,39,-15,11,-41,4,-2,-6, 
  /* [0][1][][] */ 127,6,1,-99,14,-27,35,-16,9,9,-13,54,-7,-1,18,-33,1,-50,-62,-87,10,-73,-125,-19,5,99,-14,-127,-9,33,12,-108,17,-53,-2,127,-3,60,-41,42,-62,-127,39,-89,-44,-13,-14,-5, 26,-127,-127,115,-127,-127,-127,-127,-127,-95,127,-127,127,127,35,-127,-83,127,127,-107,127,127,112,127,127,-127,-127,29,-127,-127,94,127,-127,127,-29,-40,127,-127,127,127,127,-79,127,127,127,-119,101,106, 54,5,49,-13,6,-62,44,19,-25,15,-105,-7,1,-41,127,4,63,-66,-70,85,14,-45,11,-34,1,5,-37,69,20,40,1,3,33,-43,9,67,-5,65,69,-9,-81,10,-84,-32,27,-15,-11,5, 
  /* [0][2][][] */ -53,-7,26,-17,7,33,-37,22,7,-24,11,33,6,-5,-38,17,6,22,-15,105,6,-32,-16,-13,-3,22,0,51,-10,4,47,-32,-18,-44,-33,-39,-1,32,9,-22,9,-3,41,-37,-36,19,-12,17, 68,126,76,21,16,-21,123,35,18,-3,43,26,-5,-1,-91,25,-57,-57,-37,122,-37,48,12,19,32,-62,-40,30,76,1,127,21,86,-26,7,-35,-25,-16,-12,119,-27,-11,-40,45,20,-30,7,-127, -42,-4,7,-3,5,-6,-61,8,-20,-11,-40,-40,20,-9,-9,11,33,23,-7,-127,24,-10,5,-9,-6,11,-10,-54,-15,8,6,8,-20,87,-37,-23,-4,37,26,-61,5,10,-37,6,-43,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.01345457136631012, 0.012480909004807472, 0.0079927826300263405, 0.013643886893987656, 0.0061665191315114498, 0.0041650473140180111, 0.036664143204689026, 0.0065963142551481724, 0.0044172490015625954, 0.0072829029522836208, 0.0033610155805945396, 0.0084775825962424278, 0.010101499035954475, 0.0075734513811767101, 0.0042110215872526169, 0.030519664287567139, 0.0080552054569125175, 0.0090593928471207619, 0.0027419708203524351, 0.0067165559157729149, 0.012898489832878113, 0.0071735666133463383, 0.0093959067016839981, 0.0058096968568861485, 0.0066252201795578003, 0.0060756220482289791, 0.029950037598609924, 0.0044912556186318398, 0.0072340234182775021, 0.066160358488559723, 0.0040402086451649666, 0.008653419092297554, 0.034306615591049194, 0.0065631209872663021, 0.0085698254406452179, 0.0071609788574278355, 0.014011409133672714, 0.0056399479508399963, 0.011337035335600376, 0.00082593917613849044, 0.0064496123231947422, 0.0024033905938267708, 0.0057171797379851341, 0.0061261062510311604, 0.0065073850564658642, 0.0056808404624462128, 0.010570868849754333, 0.0045752916485071182, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -52278, -196, 7935, -73, 6010, -3478, 1416, 22322, 3019, 27765, -2260, 21575, -7120, -1197, 25026, 2174, -100, 18686, 36370, 11706, 216, -320, 438, 15714, -8034, 25639, 45257, 32043, 3816, 490, -1037, 1229, 1003, 18027, -6793, 14286, -11555, 18867, -22495, 134895, 21168, 18902, 12134, -1682, 15141, 2538, 1372, -39, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0003165781672578305, 0.00029366844682954252, 0.00018806547450367361, 0.00032103262492455542, 0.00014509457105305046, 9.8001117294188589e-05, 0.00086268573068082333, 0.00015520739543717355, 0.00010393527190899476, 0.00017136242240667343, 7.9082718002609909e-05, 0.00019947253167629242, 0.00023768233950249851, 0.00017819885397329926, 9.9082863016519696e-05, 0.00071810977533459663, 0.00018953424296341836, 0.00021316218771971762, 6.451696390286088e-05, 0.00015803660789970309, 0.00030349387088790536, 0.00016878980386536568, 0.00022108016128186136, 0.00013669875625055283, 0.00015588753740303218, 0.00014295581786427647, 0.0007047067629173398, 0.00010567660501692444, 0.00017021231178659946, 0.0015567142982035875, 9.5063733169808984e-05, 0.00020360985945444554, 0.00080721452832221985, 0.00015442637959495187, 0.00020164294983260334, 0.00016849362873472273, 0.00032968021696433425, 0.00013270466297399253, 0.00026675377739593387, 1.9433862689766102e-05, 0.00015175559383351356, 5.6550368753960356e-05, 0.00013452187704388052, 0.00014414367615245283, 0.00015311494644265622, 0.00013366683560889214, 0.00024872634094208479, 0.00010765392653411254, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -50,-19,-39,10,4,-16,-6,1,-104,127,-41,100,110,5,73,-24,-15,-36,9,5,16,0,-29,-30,21,-84,19,59,-10,21,8,-34,-6,-72,127,33,2,-10,-15,-20,99,-2,38,-27,-25,17,-11,-12, 
  /* [1][0][][] */ 1,28,127,3,-6,-23,-2,-81,29,0,19,3,-20,3,-5,-121,9,-57,10,8,-29,28,20,-27,-21,-10,12,0,7,-11,8,1,-5,13,12,16,-9,-35,73,-55,17,40,-13,20,-18,12,18,0, 
  /* [2][0][][] */ 5,-51,15,-39,35,27,-7,-26,9,-4,-5,16,-9,62,9,-8,-33,127,-24,-32,-10,22,-39,-11,122,2,5,-8,-27,-7,3,-42,-12,-16,1,10,-7,-3,-11,7,15,-16,-18,-4,2,29,-26,-38, 
  /* [3][0][][] */ 3,-79,0,16,3,-10,-5,-1,-9,-9,20,21,11,-8,47,3,-5,-18,4,23,-13,17,-21,-1,5,49,-6,3,-8,4,127,0,12,10,-6,-1,-21,-13,-7,10,-5,4,-11,29,-3,4,-3,34, 
  /* [4][0][][] */ -108,5,6,-2,2,-42,4,14,31,-30,29,-25,-35,1,-23,2,-3,10,1,24,0,-28,7,2,-5,54,1,119,4,11,-12,-33,-2,-127,-34,12,-3,0,-4,5,-47,-10,-18,22,-60,-2,7,3, 
  /* [5][0][][] */ -29,29,18,6,-47,12,-3,53,29,-2,14,2,-3,-42,2,33,-4,-76,19,5,48,-49,8,42,12,10,-67,-39,-36,-29,18,0,-8,-57,-1,-68,64,7,-39,18,22,-49,-7,6,127,-4,-42,-2, 
  /* [6][0][][] */ -29,-21,-22,-7,34,-36,-2,-23,-3,-12,35,-18,-7,34,1,-48,0,2,-3,-25,-29,49,-2,-75,0,-14,-49,-62,20,41,-17,-1,10,-51,-18,53,-64,-54,4,-57,-19,8,12,39,127,-36,39,13, 
  /* [7][0][][] */ 12,32,-81,25,-29,16,2,65,-5,-8,63,-35,14,-29,-2,-9,-14,-127,40,-40,67,43,14,-54,16,-26,29,7,-24,32,-16,3,2,38,3,-26,-6,-57,-38,-70,-19,-22,42,61,-27,-15,-8,-1, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.022455658763647079, 0.033259626477956772, 0.065268941223621368, 0.073499977588653564, 0.028678962960839272, 0.026279695332050323, 0.029818741604685783, 0.043427828699350357, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { -38542, 25786, -12595, -14294, 14114, -4224, 34554, 45283, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 0.00052836845861747861, 0.00078257947461679578, 0.0015357398660853505, 0.0017294113058596849, 0.00067479914287105203, 0.00061834580264985561, 0.00070161744952201843, 0.0010218312963843346, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ -127,7,-6,82,-37,41,36,-30, 
  /* [1][0][][] */ 25,65,33,16,11,-40,93,127, 
  /* [2][0][][] */ -39,-7,1,2,-127,-2,16,9, 
  /* [3][0][][] */ 100,1,-14,-121,-127,15,25,-21, 
  /* [4][0][][] */ -127,40,-1,-11,83,-15,30,4, 
  /* [5][0][][] */ -105,-27,20,-15,-127,7,3,87, 
  /* [6][0][][] */ -6,-127,16,-13,9,5,-11,28, 
  /* [7][0][][] */ -60,-3,11,96,127,-20,-32,-3, 
  /* [8][0][][] */ 71,-2,7,-127,-2,-26,-54,-34, 
  /* [9][0][][] */ -18,-127,-7,-6,11,96,-56,86, 
  /* [10][0][][] */ -110,-7,-3,22,-127,71,73,-20, 
  /* [11][0][][] */ 112,13,40,12,-54,-48,-26,-127, 
  /* [12][0][][] */ -3,17,39,-5,9,-84,127,70, 
  /* [13][0][][] */ 50,-44,1,-25,110,127,99,-35, 
  /* [14][0][][] */ 127,41,-28,9,-99,-4,-39,-32, 
  /* [15][0][][] */ -9,-127,28,-16,-10,2,1,29, 
  /* [16][0][][] */ -46,-7,9,12,-127,-7,8,6, 
  /* [17][0][][] */ -17,95,-119,2,5,-127,101,-85, 
  /* [18][0][][] */ 127,-24,-39,10,-62,20,4,98, 
  /* [19][0][][] */ 127,-54,-31,0,57,-2,59,22, 
  /* [20][0][][] */ 121,25,-20,127,-4,36,-2,-60, 
  /* [21][0][][] */ 3,36,-44,-4,-20,72,-127,-87, 
  /* [22][0][][] */ -127,49,54,-16,-42,-3,-39,-27, 
  /* [23][0][][] */ -41,-58,1,29,-127,63,81,-14, 
  /* [24][0][][] */ 127,-7,-16,-10,-90,-12,8,15, 
  /* [25][0][][] */ 20,-18,-1,-22,127,49,55,-28, 
  /* [26][0][][] */ 1,-93,6,-35,-2,-127,95,-50, 
  /* [27][0][][] */ -16,-127,24,-15,-1,-55,31,-12, 
  /* [28][0][][] */ -121,45,-3,3,-1,2,127,73, 
  /* [29][0][][] */ -12,36,15,11,6,37,-102,-127, 
  /* [30][0][][] */ 127,-13,-1,10,-97,-8,-31,-20, 
  /* [31][0][][] */ -13,-31,48,-20,17,-104,127,64, 
  /* [32][0][][] */ -75,28,8,3,-127,-109,-94,47, 
  /* [33][0][][] */ -28,7,-2,20,-127,-48,-45,23, 
  /* [34][0][][] */ 11,-127,55,-7,-10,85,-79,70, 
  /* [35][0][][] */ -21,-49,-127,-9,-2,-67,48,-54, 
  /* [36][0][][] */ 12,127,52,8,-9,10,-28,-45, 
  /* [37][0][][] */ -127,33,39,-19,55,-36,-8,-115, 
  /* [38][0][][] */ -127,-22,-49,-9,52,29,26,114, 
  /* [39][0][][] */ -11,-28,83,13,16,-90,127,100, 
  /* [40][0][][] */ -33,-20,-11,-36,-127,112,123,-29, 
  /* [41][0][][] */ -127,49,-1,-81,-92,-96,-97,47, 
  /* [42][0][][] */ -51,-127,-112,-8,-13,58,-121,-90, 
  /* [43][0][][] */ -72,3,-6,-127,106,65,62,-8, 
  /* [44][0][][] */ 127,2,21,-79,30,-30,-4,33, 
  /* [45][0][][] */ -22,-127,-17,-12,-8,-66,70,10, 
  /* [46][0][][] */ 100,-2,2,-22,127,-34,-25,2, 
  /* [47][0][][] */ 127,-12,-7,126,0,34,17,-48, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.00076553976396098733, 0.0015523411566391587, 0.00056046462850645185, 0.00053741800365969539, 0.00042172384564764798, 0.00052292301552370191, 0.00081635650712996721, 0.00046225605183281004, 0.00078747601946815848, 0.0012737732613459229, 0.0018577460432425141, 0.0005495459190569818, 0.00070250255521386862, 0.0014743120409548283, 0.00025616763741709292, 0.00087987305596470833, 0.00054044078569859266, 0.00065601390087977052, 0.00041303847683593631, 0.00053683726582676172, 0.00063366617541760206, 0.00047275048564188182, 0.00068127206759527326, 0.00031295022927224636, 0.00049355020746588707, 0.00057663815096020699, 0.0033620195463299751, 0.00089942134218290448, 0.00041651070932857692, 0.00083166535478085279, 0.00049038516590371728, 0.0004132558242417872, 0.0014631268568336964, 0.0005158450803719461, 0.0013521200744435191, 0.001025329576805234, 0.0014402801170945168, 0.0005703573115170002, 0.00043480162275955081, 0.00061023264424875379, 0.0003001927980221808, 0.00049879460129886866, 0.00055997952586039901, 0.00047860282938927412, 0.0041047390550374985, 0.00082293449668213725, 0.00074239581590518355, 0.0020803213119506836, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 710, 960, 2126, 604, 11264, 16737, 2981, 59, -806, -740, 1160, 1276, 3775, 1153, 30305, 3019, 2103, -1241, -358, 3564, -2071, 11549, 11577, 10719, 7056, 407, 4471, 4490, 8985, -541, 11572, 6215, 543, -264, 5894, 3845, -2017, 392, -715, 6703, 1223, -542, -1095, 59, 1018, 3658, 686, 1206, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00035417045000940561, 0.00071817741263657808, 0.00025929417461156845, 0.00024863186990842223, 0.00019510694255586714, 0.00024192588170990348, 0.00037768037873320282, 0.00021385881700553, 0.00036431907210499048, 0.00058930035447701812, 0.0008594703976996243, 0.00025424273917451501, 0.00032500681118108332, 0.0006820778944529593, 0.00011851377348648384, 0.00040706575964577496, 0.00025003033806569874, 0.0003034992259927094, 0.00019108873675577343, 0.00024836318334564567, 0.00029316026484593749, 0.00021871397620998323, 0.00031518470495939255, 0.00014478375669568777, 0.00022833679395262152, 0.00026677674031816423, 0.0015554097481071949, 0.00041610962944105268, 0.00019269513722974807, 0.00038476288318634033, 0.00022687252203468233, 0.00019118929049000144, 0.00067690317519009113, 0.00023865133698564023, 0.00062554684700444341, 0.00047435998567380011, 0.0006663333042524755, 0.00026387095567770302, 0.00020115726510994136, 0.0002823189424816519, 0.00013888164539821446, 0.00023076307843439281, 0.00025906975497491658, 0.00022142152010928839, 0.0018990224925801158, 0.00038072362076491117, 0.00034346309257671237, 0.00096244295127689838, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ 71,-93,95,72,54,-34,105,-65,60,-86,-80,47,51,-44,-72,-90,101,77,49,77,66,-74,-83,51,-33,-40,-62,-65,-67,62,-64,-113,-13,40,68,63,-64,52,-50,-22,50,-74,57,61,-94,11,76,-35, 82,-98,127,87,-77,-68,-58,-85,98,-101,-64,73,80,-112,-96,93,-38,95,83,127,85,-113,53,72,-51,-78,-66,-81,56,80,-31,-127,-88,81,81,82,-81,82,-82,-17,76,-94,82,88,-74,-127,94,-103, 35,-48,70,39,19,-42,-48,-38,42,-31,5,34,29,-80,-54,-1,-54,38,34,71,35,-54,31,26,-26,-48,-42,-23,33,32,87,-89,-84,44,34,33,-30,39,-38,-9,41,-41,34,43,-5,-8,37,-73, 
  /* [0][1][][] */ 91,-111,-42,94,57,-82,127,-89,87,-115,-71,81,84,-114,-13,-127,127,108,75,-38,84,106,-127,73,72,-77,-93,-99,-127,86,-71,-9,-89,72,106,94,-83,79,-80,91,83,-98,86,89,-89,106,96,-92, 127,-127,-64,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-22,98,-65,127,127,-49,127,127,68,127,127,-127,-127,-127,54,127,-29,15,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 64,-78,-33,67,39,-62,-50,-62,56,-42,-61,59,48,-54,-15,10,-64,52,58,-28,57,63,52,65,66,-64,-61,-45,37,55,127,14,-60,69,47,48,-49,59,-59,57,61,-57,53,62,-61,-67,59,-56, 
  /* [0][2][][] */ 47,-50,-47,49,29,-54,65,-42,40,-75,-4,39,56,-74,83,-79,73,51,34,-30,26,-11,-74,29,-24,-44,-50,-48,-73,31,-41,88,-74,37,48,42,-25,38,-44,-88,47,-50,41,44,-22,15,40,-74, 75,-75,-48,80,-55,-65,-72,-66,52,-79,-65,61,75,-49,127,33,-47,60,61,-42,56,-17,42,66,-48,-66,-78,-60,33,61,-23,116,-55,64,57,58,-48,62,-66,-109,68,-65,62,63,-87,50,64,-51, 44,-41,-27,46,30,-20,-17,-34,15,-27,-50,28,31,3,68,23,-37,22,28,-31,27,-1,41,41,-24,-27,-48,-24,35,34,62,66,0,34,14,23,-23,30,-29,-56,28,-33,25,29,-62,10,33,-2, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0033517144620418549, 0.0016530532157048583, 0.0086281877011060715, 0.0020131468772888184, 0.0060553164221346378, 0.0025908593088388443, 0.0055184978991746902, 0.0043334458023309708, 0.0033482322469353676, 0.001727696624584496, 0.0021967338398098946, 0.0036940453574061394, 0.0018706724513322115, 0.0019160847878083587, 0.0068056425079703331, 0.006758551113307476, 0.0062393862754106522, 0.0029621534049510956, 0.0044648437760770321, 0.0065790931694209576, 0.0030445570591837168, 0.00970451720058918, 0.004721370991319418, 0.0056374883279204369, 0.002932143397629261, 0.0043293186463415623, 0.0012471249792724848, 0.0027742658276110888, 0.0047248615883290768, 0.004374135285615921, 0.0046229311265051365, 0.006333732046186924, 0.0020804177038371563, 0.0059744981117546558, 0.0012295957421883941, 0.0021101471502333879, 0.0055344495922327042, 0.0042717582546174526, 0.0047015128657221794, 0.0045602885074913502, 0.0051314029842615128, 0.0040090004913508892, 0.0033318528439849615, 0.0041435216553509235, 0.0013701026327908039, 0.005919646006077528, 0.0040761781856417656, 0.0014133764198049903, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 2481, 41526, -780, 50435, 3634, 130102, -2882, 56255, 3185, 31937, 25066, 3331, 262, 31206, -396, -3061, -349, 106, 3565, -2253, 1430, -2795, -814, -20202, -6001, 43435, 126196, 105764, 2741, 2679, -2184, 402, 22550, 595, 38387, 4883, 44974, 149, 52356, 2160, 84, 61843, -432, 2144, 42865, -525, 3169, 43617, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 7.8863871749490499e-05, 3.8895370380487293e-05, 0.00020301618496887386, 4.7368161176564172e-05, 0.0001424780348315835, 6.0961396229686216e-05, 0.00012984701606910676, 0.00010196342918789014, 7.878193719079718e-05, 4.0651684685144573e-05, 5.1687857194337994e-05, 8.6918713350314647e-05, 4.4015821913490072e-05, 4.5084347220836207e-05, 0.00016013276763260365, 0.00015902474115137011, 0.00014680909225717187, 6.9697729486506432e-05, 0.00010505515092518181, 0.00015480219735763967, 7.163664122344926e-05, 0.00022834158153273165, 0.00011109108163509518, 0.00013264679000712931, 6.8991612351965159e-05, 0.00010186632425757125, 2.9344117137952708e-05, 6.5276843088213354e-05, 0.00011117321264464408, 0.00010292082879459485, 0.00010877485328819603, 0.00014902898692525923, 4.8951005737762898e-05, 0.0001405764342052862, 2.8931664928677492e-05, 4.9650523578748107e-05, 0.0001302223390666768, 0.00010051196295535192, 0.00011062383418902755, 0.00010730091162258759, 0.0001207388995680958, 9.432942169951275e-05, 7.8396536991931498e-05, 9.7494630608707666e-05, 3.2237709092441946e-05, 0.00013928579573985189, 9.5910079835448414e-05, 3.3255917514907196e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ -8,-4,-12,6,28,-9,1,99,-53,16,43,-5,16,-8,-14,13,15,-13,-11,-3,65,-4,23,126,-19,91,-1,-14,32,-13,23,-23,-26,55,20,-46,15,46,11,-10,-110,-34,22,45,47,29,-127,-53, 
  /* [1][0][][] */ -42,-12,22,18,-32,10,4,58,-56,-36,8,-44,-19,-23,-5,1,-24,127,-5,16,7,9,-28,-17,27,-38,11,26,-30,-83,-43,28,-17,-3,30,-2,-2,-41,3,20,-20,-29,127,8,3,0,20,-3, 
  /* [2][0][][] */ -20,-9,-7,-36,-4,-70,8,-20,2,7,8,25,18,13,-14,16,-3,-17,-25,-15,-8,0,1,-127,-14,78,-12,5,-4,-24,-7,-4,-12,53,12,-3,18,11,22,-2,-39,-1,-17,-9,1,-6,13,12, 
  /* [3][0][][] */ -8,36,-2,-31,-6,-1,-1,-2,-20,-4,3,39,-127,3,-4,-2,3,4,-18,-2,-28,4,2,20,-7,-13,1,23,-10,17,7,17,9,3,17,19,-10,26,44,2,12,6,23,-29,3,-5,5,21, 
  /* [4][0][][] */ 44,-39,11,11,21,26,21,-25,-29,0,-14,-22,4,12,5,11,19,-7,-79,3,-5,7,22,76,2,-26,4,47,12,-81,20,12,9,-35,31,-127,13,36,-6,15,-16,16,11,-23,-11,-21,8,3, 
  /* [5][0][][] */ 33,-3,-24,61,1,-10,9,24,4,-6,35,12,5,58,4,4,-23,25,30,5,12,1,3,-25,1,-49,5,-21,3,-12,-1,8,60,-127,3,35,-20,-14,8,10,-94,51,22,-4,-2,0,-106,-11, 
  /* [6][0][][] */ 26,-5,7,6,-8,-2,3,-14,-4,7,-4,9,-18,10,-1,11,-3,-12,127,6,4,16,19,-39,11,4,28,-11,-10,-1,-6,7,-5,-10,30,-37,0,-44,69,22,-2,-9,-7,6,-4,3,6,-15, 
  /* [7][0][][] */ -49,-21,-11,32,-15,85,-1,52,-5,31,-11,127,84,-5,-12,3,-7,-19,-6,-15,-32,-11,-18,64,11,-35,-47,-27,-5,-17,-14,2,2,2,-29,0,9,-63,96,5,21,29,-66,-62,13,-9,2,8, 
  /* [8][0][][] */ -50,-53,2,6,-4,-4,4,33,-2,-76,2,49,52,12,8,5,-16,64,-30,5,-54,25,-1,-9,0,7,0,40,-8,127,-15,32,-15,7,-17,-126,-119,75,34,27,24,-8,121,-27,12,35,19,30, 
  /* [9][0][][] */ -30,13,-2,30,13,-34,-5,-8,63,-45,12,59,-64,6,19,10,-11,13,-44,-25,50,11,-16,-25,-4,6,51,-31,4,19,11,-8,-1,18,87,-109,-12,-127,-99,17,-37,23,64,10,-1,6,-13,-36, 
  /* [10][0][][] */ -22,-6,-39,-127,38,84,7,-6,-7,31,29,2,48,-49,-31,15,36,-40,52,-38,32,-32,37,50,-49,-99,4,-31,45,29,39,-42,-17,-84,25,-7,18,-39,9,-38,-36,-58,-10,7,12,16,12,-24, 
  /* [11][0][][] */ 2,42,4,67,42,-72,-78,-23,-5,62,-22,0,1,62,1,-71,19,52,13,-7,-55,-110,16,8,8,-35,12,-21,58,-44,24,-81,39,-10,-42,-83,83,25,2,-127,3,57,89,-70,-1,-59,26,35, 
  /* [12][0][][] */ 127,-11,-7,16,10,13,6,98,24,-9,-56,-24,7,14,-21,-4,-14,16,-1,-2,2,-3,12,22,-1,15,-6,4,-1,11,-1,-1,1,-62,-14,14,-23,-20,-37,-4,-11,-79,6,-121,-56,-3,80,-6, 
  /* [13][0][][] */ 10,4,1,4,4,-11,2,1,-2,9,4,19,-4,6,1,-1,7,1,10,3,12,-13,8,-2,2,0,17,127,11,-2,7,-7,6,0,-39,19,7,-4,7,-17,-12,-2,0,4,1,0,-8,-10, 
  /* [14][0][][] */ 62,-19,42,-70,54,29,42,-97,-52,-52,1,118,-68,-11,60,8,58,29,-51,63,25,13,72,-13,18,51,-39,-117,19,-33,63,35,5,73,-127,-45,-40,50,94,4,-31,10,50,7,1,-1,17,-28, 
  /* [15][0][][] */ -1,-53,-75,-51,62,25,77,-54,-17,25,-21,-46,88,30,-106,71,62,49,80,-84,-113,-18,72,-21,-105,44,35,60,64,58,46,-42,16,65,100,127,-18,-109,-12,-55,93,60,124,-48,3,-27,-18,70, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.029942251741886139, 0.038422182202339172, 0.053001873195171356, 0.043492179363965988, 0.038320600986480713, 0.051183279603719711, 0.03447316586971283, 0.021648261696100235, 0.029349999502301216, 0.024818506091833115, 0.041656926274299622, 0.028296465054154396, 0.04414527490735054, 0.051938775926828384, 0.020334664732217789, 0.024257635697722435, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -33704, 751, 5261, -8794, 1987, -3160, -10767, -42722, 3795, 28779, 30192, -5299, 743, -21950, 37176, -43225, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00070452358340844512, 0.00090405135415494442, 0.0012471029767766595, 0.0010233453940600157, 0.00090166123118251562, 0.0012043124297633767, 0.00081113335909321904, 0.00050937087507918477, 0.00069058826193213463, 0.00058396486565470695, 0.00098016299307346344, 0.00066579919075593352, 0.0010387123329564929, 0.001222088816575706, 0.00047846269444562495, 0.0005707679083570838, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 33,-31,125,107,78,-51,4,-64,127,-24,-62,-75,39,65,-37,-88, 
  /* [1][0][][] */ 27,55,1,-23,110,-24,-8,9,25,62,-34,127,-5,-36,110,-72, 
  /* [2][0][][] */ 27,-91,-17,0,-61,37,-50,89,-100,-87,-5,72,-25,-127,59,-98, 
  /* [3][0][][] */ 109,127,-3,47,-104,0,-55,-17,-10,-1,101,-48,-49,82,-58,-46, 
  /* [4][0][][] */ -9,-4,18,8,-27,32,-15,32,-74,-51,2,-4,-1,-127,19,-10, 
  /* [5][0][][] */ 113,-22,-23,-8,-18,-110,-15,7,-5,25,-127,-29,22,-17,-12,29, 
  /* [6][0][][] */ -104,-59,-19,75,-37,-1,-43,2,-127,-56,-74,-14,17,18,0,102, 
  /* [7][0][][] */ -28,21,-67,51,35,-127,-19,36,12,-47,10,-2,-5,14,-27,3, 
  /* [8][0][][] */ 22,-34,12,-12,26,21,-60,-70,-18,24,-69,5,-127,4,-9,25, 
  /* [9][0][][] */ 13,-46,83,113,12,25,4,-94,127,-122,-8,-30,25,44,-73,21, 
  /* [10][0][][] */ -99,-81,-30,-44,77,28,45,65,85,-56,-100,24,127,-103,-89,85, 
  /* [11][0][][] */ 44,-22,-127,27,43,24,-33,30,-22,-35,-6,-20,-23,23,-45,-14, 
  /* [12][0][][] */ 127,-70,-1,19,17,-45,-70,-35,28,13,-113,-40,-48,-19,-8,53, 
  /* [13][0][][] */ 25,-53,1,-69,99,50,-95,-127,36,-59,58,5,14,-9,49,4, 
  /* [14][0][][] */ -63,36,-83,-51,101,-127,34,-74,32,46,-5,-93,28,96,-18,30, 
  /* [15][0][][] */ 32,-11,53,36,54,-41,-42,-32,24,-55,-70,-24,-127,-62,4,51, 
  /* [16][0][][] */ -89,42,-8,7,7,127,41,67,-12,27,98,9,-14,17,-25,-37, 
  /* [17][0][][] */ -10,-16,-63,-40,-30,6,27,52,-21,127,-8,-12,-3,66,76,-1, 
  /* [18][0][][] */ 4,127,-55,-2,-8,-6,49,-85,21,121,-75,113,8,-66,50,-84, 
  /* [19][0][][] */ 3,-23,28,19,11,37,-14,6,14,6,-38,-16,-127,0,-7,10, 
  /* [20][0][][] */ 88,-61,-3,-105,-23,36,14,-105,-76,12,-127,-29,31,5,40,11, 
  /* [21][0][][] */ 55,-3,127,40,-12,47,15,-13,0,39,-18,-8,-16,55,-1,-21, 
  /* [22][0][][] */ 7,29,18,-8,-22,-46,31,127,3,-28,37,30,24,41,66,45, 
  /* [23][0][][] */ -26,22,-81,22,9,-127,23,58,18,-24,-20,-3,-57,18,-1,46, 
  /* [24][0][][] */ 33,-78,-9,-61,40,-17,-43,-22,14,18,70,77,-43,71,127,40, 
  /* [25][0][][] */ -127,-79,-34,9,29,12,16,-31,-23,-2,-66,27,19,37,20,37, 
  /* [26][0][][] */ 18,-9,40,7,-14,23,-34,62,-84,-41,-15,18,5,-127,16,-10, 
  /* [27][0][][] */ -86,48,-31,42,25,-20,10,26,37,-17,127,39,-4,-4,-4,-14, 
  /* [28][0][][] */ -13,-8,19,41,-9,5,18,93,31,22,-29,-14,-127,-9,-9,38, 
  /* [29][0][][] */ -29,71,46,-56,45,-27,17,-40,-127,32,-33,-1,3,43,-76,19, 
  /* [30][0][][] */ -12,7,-127,-39,32,-72,19,24,-13,-20,-10,-18,-44,-30,19,22, 
  /* [31][0][][] */ 127,-31,-105,36,19,-16,-43,66,-12,2,-94,-47,18,-14,-81,32, 
  /* [32][0][][] */ -118,63,39,35,14,103,30,36,9,-11,127,-14,-53,11,-20,-48, 
  /* [33][0][][] */ 3,-9,127,-9,-59,30,-1,-33,-6,9,3,14,-4,20,21,21, 
  /* [34][0][][] */ -36,-26,-60,-127,33,-18,23,-16,-11,-64,-7,-115,-11,20,57,-2, 
  /* [35][0][][] */ 5,-50,48,32,72,-18,15,-35,-126,38,-13,45,-13,127,-48,-31, 
  /* [36][0][][] */ -110,44,-18,-13,6,44,24,81,-36,25,127,-14,5,26,29,-14, 
  /* [37][0][][] */ -38,5,127,-22,-60,-60,25,-30,19,11,-5,3,0,-54,61,1, 
  /* [38][0][][] */ -6,7,22,20,25,-44,-60,10,1,-34,62,-7,127,40,1,-1, 
  /* [39][0][][] */ -54,-19,-25,-47,-76,-127,53,82,-30,-41,26,-106,-29,24,95,70, 
  /* [40][0][][] */ 71,1,-33,-3,-24,121,-23,-4,7,-1,21,3,127,8,-46,-25, 
  /* [41][0][][] */ -13,-15,-48,-127,19,5,-34,-86,11,-65,28,-56,-16,-18,-11,36, 
  /* [42][0][][] */ 43,40,13,89,-102,-26,-90,9,-69,-74,73,-57,-38,127,-28,11, 
  /* [43][0][][] */ 21,127,-20,108,35,24,42,-65,-28,75,-4,28,14,-33,36,21, 
  /* [44][0][][] */ -12,-10,-127,20,52,82,-54,41,-17,-26,56,-12,6,-22,-31,-12, 
  /* [45][0][][] */ 6,3,-7,-127,-28,-10,52,-6,10,20,-38,1,21,-71,43,-16, 
  /* [46][0][][] */ 9,47,48,-36,5,8,-38,51,28,-50,-27,5,1,127,57,-4, 
  /* [47][0][][] */ 20,-16,17,-57,-26,27,-57,54,-18,-25,14,35,1,-127,34,20, 
  /* [48][0][][] */ 13,-15,12,-127,-5,-10,-5,-1,18,-37,7,-14,5,54,-18,60, 
  /* [49][0][][] */ 31,-38,8,127,106,22,-5,51,-54,7,41,38,-11,50,121,-23, 
  /* [50][0][][] */ -18,1,57,-40,2,127,-33,-68,12,-26,117,31,101,-19,-24,-49, 
  /* [51][0][][] */ 37,58,2,-7,26,-4,-40,19,40,4,-10,127,19,30,39,-48, 
  /* [52][0][][] */ -18,60,95,13,12,-17,9,-41,-30,23,2,45,-1,67,-127,-19, 
  /* [53][0][][] */ -22,-45,-63,-127,-69,14,10,-40,-28,44,19,-21,18,-33,57,27, 
  /* [54][0][][] */ 9,0,-42,-38,10,-4,-7,1,77,-34,9,-25,-22,127,24,36, 
  /* [55][0][][] */ 1,-24,-45,-25,12,-25,-4,-127,10,-73,-13,-2,-29,-67,-36,-4, 
  /* [56][0][][] */ 54,40,29,63,7,-23,19,127,19,-21,3,-44,79,-19,-56,51, 
  /* [57][0][][] */ 101,-18,127,-39,-101,-80,-3,-31,35,24,-112,-17,62,-48,82,4, 
  /* [58][0][][] */ 96,70,9,109,-127,8,-12,30,-28,41,83,-29,-55,-73,-50,-65, 
  /* [59][0][][] */ 127,-41,-10,-12,-18,-33,-13,0,-38,9,-114,3,21,-8,30,29, 
  /* [60][0][][] */ -127,29,0,9,15,23,11,32,15,-6,87,20,-28,7,8,-9, 
  /* [61][0][][] */ -115,36,29,17,33,21,-56,-38,83,-70,79,-2,23,-41,-127,-63, 
  /* [62][0][][] */ -23,-45,-127,-2,78,68,-4,58,-14,-68,35,1,-40,-6,-66,21, 
  /* [63][0][][] */ -20,6,127,-36,-49,-55,46,-20,2,22,-16,11,-3,-43,59,25, 
  /* [64][0][][] */ 15,84,-25,21,40,-38,73,-127,-16,89,-1,-16,5,-104,10,53, 
  /* [65][0][][] */ -5,8,6,-11,51,1,-10,-127,-39,-67,-13,-58,-13,-38,41,13, 
  /* [66][0][][] */ -127,-2,-28,9,-42,18,15,-37,-84,-35,-70,52,48,26,38,72, 
  /* [67][0][][] */ -13,-31,22,127,15,-8,-9,50,39,37,14,-6,-10,-42,-108,-33, 
  /* [68][0][][] */ 25,6,-1,127,-57,-23,1,-18,-55,25,-4,-16,-5,-58,-32,-38, 
  /* [69][0][][] */ 114,67,36,125,52,-32,71,-121,22,127,1,53,-3,-35,61,-12, 
  /* [70][0][][] */ 14,-9,19,-107,127,-13,41,17,66,-42,53,-42,13,99,41,127, 
  /* [71][0][][] */ 24,33,5,77,49,-127,-37,87,39,-88,6,9,23,-50,-61,38, 
  /* [72][0][][] */ -127,-70,-32,61,8,36,-25,26,-61,-19,-92,35,52,11,2,88, 
  /* [73][0][][] */ -28,-18,-6,52,30,-24,-13,-35,74,-4,4,16,18,127,-50,-47, 
  /* [74][0][][] */ 42,-43,9,-31,-32,-16,35,-17,-29,4,-123,19,-127,-6,12,45, 
  /* [75][0][][] */ -32,-15,-29,127,-37,3,-5,-30,-74,31,-5,-40,-4,-68,-7,-44, 
  /* [76][0][][] */ -4,-3,-2,48,49,24,-9,-127,7,-118,11,29,-21,-24,28,-48, 
  /* [77][0][][] */ 127,-39,23,49,-45,-11,-29,-9,46,-6,-59,34,36,15,-47,33, 
  /* [78][0][][] */ -3,-15,36,-11,8,-34,-58,46,50,-17,-51,-30,22,127,48,-17, 
  /* [79][0][][] */ 1,24,44,11,46,62,-47,-64,13,-39,66,-19,127,-29,-21,-36, 
  /* [80][0][][] */ -78,-83,-63,125,3,106,38,-8,-78,41,-127,15,41,-102,-45,27, 
  /* [81][0][][] */ 90,-19,-114,32,124,127,-58,-17,-43,-109,-3,-87,-27,20,-116,37, 
  /* [82][0][][] */ 126,82,-6,25,-127,-5,-86,-37,-57,-9,107,-85,-75,97,3,-28, 
  /* [83][0][][] */ 127,38,0,-25,-3,-8,-11,28,32,13,83,-31,-54,-33,-26,-76, 
  /* [84][0][][] */ 19,-76,-67,-34,56,42,9,-127,-47,-71,31,21,-30,-6,-3,-4, 
  /* [85][0][][] */ -45,23,-27,-55,-11,-8,78,106,2,127,-3,-53,35,76,91,-35, 
  /* [86][0][][] */ 101,-38,7,-4,10,-55,-10,-28,5,4,-127,14,22,22,-1,19, 
  /* [87][0][][] */ -6,31,2,-17,-27,88,-28,45,-10,-9,2,15,12,-127,2,15, 
  /* [88][0][][] */ 12,-63,-89,-40,89,-1,-18,-127,-5,-23,-26,-8,-41,-11,5,-56, 
  /* [89][0][][] */ 15,-9,44,-127,63,0,-63,102,81,-87,46,36,-21,40,26,31, 
  /* [90][0][][] */ 0,-13,-35,59,68,-8,95,-81,71,127,-46,43,12,8,-9,-32, 
  /* [91][0][][] */ 17,-18,-50,-3,10,-127,-5,-13,-5,-6,-44,-11,21,-3,15,26, 
  /* [92][0][][] */ 30,-24,127,59,33,8,-4,40,-50,23,-52,31,16,65,2,5, 
  /* [93][0][][] */ 114,-32,-8,-10,-41,-72,26,45,-16,45,-127,-11,2,21,11,60, 
  /* [94][0][][] */ 17,-15,41,86,122,-36,2,76,15,-2,-3,62,-8,127,-21,-92, 
  /* [95][0][][] */ -91,30,27,43,16,48,9,4,14,9,127,15,-19,29,-20,-18, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.00058047531638294458, 0.0012047089403495193, 0.00062258873367682099, 0.0032108889427036047, 0.0011959468247368932, 0.00055085931671783328, 0.0008237135480158031, 0.001939506153576076, 0.0011758074397221208, 0.00033503235317766666, 0.00078595743980258703, 0.0014945804141461849, 0.0012458558194339275, 0.00039839107193984091, 0.00091274082660675049, 0.0011404823744669557, 0.00077799014979973435, 0.00072704924969002604, 0.00071665976429358125, 0.0019744499586522579, 0.001163266715593636, 0.00064409535843878984, 0.0010286141186952591, 0.00077778176637366414, 0.00063034775666892529, 0.0017216090345755219, 0.0012278753565624356, 0.00069439865183085203, 0.0015794782666489482, 0.00089784525334835052, 0.00073521421290934086, 0.00050060509238392115, 0.0003792388888541609, 0.002049584873020649, 0.00073807011358439922, 0.0012897964334115386, 0.00040873521356843412, 0.0011536979582160711, 0.001677948166616261, 0.00059237162349745631, 0.0017780372872948647, 0.00048870290629565716, 0.00067792151821777225, 0.00065502250799909234, 0.0011927774176001549, 0.0011583952000364661, 0.00064305250998586416, 0.00083596765762194991, 0.001039478462189436, 0.00086408760398626328, 0.001391543191857636, 0.0037892390973865986, 0.00051708053797483444, 0.00077817001147195697, 0.00098444882314652205, 0.00041747541399672627, 0.0013589834561571479, 0.00060891860630363226, 0.00070849258918315172, 0.001246717874892056, 0.00040516024455428123, 0.00069422746310010552, 0.0015972508117556572, 0.00145884626545012, 0.00052588724065572023, 0.00080312957288697362, 0.0011814528843387961, 0.0012832771753892303, 0.00044802928459830582, 0.00042802953976206481, 0.00060449488228186965, 0.0012875177199020982, 0.00092264608247205615, 0.0016002922784537077, 0.00097213155822828412, 0.0010234256042167544, 0.00037017028080299497, 0.00091316044563427567, 0.00044797602458857, 0.0014755703741684556, 0.00058568874374032021, 0.0011009550653398037, 0.00072298198938369751, 0.0016229506582021713, 0.00071752734947949648, 0.0008221260504797101, 0.00074202229734510183, 0.00111883704084903, 0.00057105463929474354, 0.0010453008580952883, 0.00057696952717378736, 0.0014831499429419637, 0.00060582364676520228, 0.00038967820000834763, 0.00097266444936394691, 0.00081484339898452163, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 15468, 1027, 7766, -571, 4558, 5754, 13012, 6191, -1450, 18575, 6258, 1857, 7666, 41488, -293, -2114, 9844, 10968, 2020, -240, -717, 13147, 5024, 3375, 9792, 4175, 3994, 4449, 105, -200, 6729, 12895, 17612, 1817, 7778, -825, 19027, 7860, 872, 5636, 937, 13154, 10728, 3600, 3117, 9616, 15219, 5905, 5274, 3697, 310, -610, 17663, 6899, 8074, 15495, -245, 9806, 3759, 4586, 14510, 6921, 2195, 6463, 7177, 4883, 5627, -954, 20489, 9472, 11358, -1292, -1454, 2812, 1568, 4275, 21757, 16847, 12774, -2877, 6394, -6631, -1828, 524, 7665, 6534, 7398, 4260, 9985, 5239, 8442, 3948, 11710, 24265, -10437, 13623, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00016905860684346408, 0.00035086146090179682, 0.00018132379045709968, 0.00093514466425403953, 0.00034830954973585904, 0.00016043319192249328, 0.00023989971668925136, 0.00056486501125618815, 0.00034244413836859167, 9.7575386462267488e-05, 0.00022890356194693595, 0.00043528410606086254, 0.00036284513771533966, 0.00011602808081079274, 0.00026582815917208791, 0.00033215599250979722, 0.00022658315720036626, 0.0002117470430675894, 0.00020872119057457894, 0.00057504209689795971, 0.00033879175316542387, 0.00018758741498459131, 0.00029957530205138028, 0.00022652246116194874, 0.00018358354282099754, 0.00050140428356826305, 0.00035760848550125957, 0.00020223783212713897, 0.00046000990550965071, 0.00026148994220420718, 0.00021412501519080251, 0.00014579706476069987, 0.00011045017163269222, 0.00059692451031878591, 0.00021495677356142551, 0.00037564247031696141, 0.00011904072744073346, 0.00033600491588003933, 0.0004886884125880897, 0.0001725233014440164, 0.00051783857634291053, 0.0001423306530341506, 0.00019743900338653475, 0.00019076984608545899, 0.00034738649264909327, 0.00033737297053448856, 0.00018728368740994483, 0.00024346861755475402, 0.00030273944139480591, 0.00025165831902995706, 0.00040527537930756807, 0.001103584305383265, 0.00015059539873618633, 0.00022663554409518838, 0.00028671251493506134, 0.00012158623576397076, 0.00039579262374900281, 0.00017734247376210988, 0.00020634256361518055, 0.0003630962164606899, 0.00011799954518210143, 0.00020218796271365136, 0.00046518599265255034, 0.00042487683822400868, 0.00015316027565859258, 0.00023390480782836676, 0.00034408833016641438, 0.00037374379462562501, 0.00013048479740973562, 0.00012466004409361631, 0.00017605410539545119, 0.00037497881567105651, 0.00026871298905462027, 0.00046607179683633149, 0.00028312523500062525, 0.00029806420207023621, 0.00010780901357065886, 0.00026595036615617573, 0.00013046928506810218, 0.00042974759708158672, 0.0001705769682303071, 0.00032064400147646666, 0.00021056248806416988, 0.0004726708575617522, 0.0002089738700306043, 0.00023943737323861569, 0.0002161078155040741, 0.00032585198641754687, 0.00016631491598673165, 0.0003044351760763675, 0.00016803757171146572, 0.00043195506441406906, 0.00017644109902903438, 0.00011349053238518536, 0.00028328041662462056, 0.00023731635883450508, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -17,7,-20,103,-17,24,-62,-53,16,-7,102,-8,4,-9,-6,54,6,16,-35,5,77,1,31,-34,1,18,45,48,23,12,22,48,-11,26,10,-14,4,49,-59,-27,20,9,27,16,-83,-56,24,-5,-11,-19,-9,-7,50,5,-10,1,-2,-35,27,-30,27,-1,127,27,-13,-11,10,-53,66,36,0,-8,78,-33,71,5,17,-127,30,62,1,19,127,-15,39,28,-29,-18,38,-7,-15,84,0,21,-3,11, -48,13,-8,11,52,-7,-10,-127,37,13,-127,-5,-17,-13,3,93,18,-31,-21,-15,80,-98,127,27,-61,-31,-104,-16,27,39,-50,17,117,10,-13,0,-24,127,-61,-127,8,-19,-30,12,49,-127,127,-45,-76,51,49,6,39,-63,33,55,36,40,-98,81,127,37,4,-21,43,-37,-97,-2,37,-30,-20,45,-51,-48,107,-3,-31,-58,-32,65,-65,67,-14,9,-9,47,53,-39,-25,53,-13,74,-127,-32,23,-127, 1,-3,-24,-72,9,22,38,22,-5,-1,4,63,1,-12,-12,7,-13,16,-19,18,10,24,22,-32,0,-32,12,15,-6,4,44,-79,42,14,11,-22,12,4,-34,-21,7,4,-15,6,23,-32,20,1,6,-9,6,-6,5,6,-5,9,-5,43,9,-3,12,-17,2,-18,-27,-17,28,-52,-104,-7,42,-18,-127,-21,-9,17,10,-14,7,13,-14,26,-35,-3,-39,20,24,36,-23,-16,24,-11,18,6,-2,-47, 
  /* [0][1][][] */ -39,59,-19,38,-84,-16,-11,-44,25,96,-44,-21,-30,-26,-7,63,127,-23,-91,-13,57,-127,-28,15,-36,-47,-126,-8,38,33,-50,28,-127,-76,-58,3,65,-3,-49,45,-19,84,1,-3,35,-53,-13,-32,127,44,-3,19,45,9,-37,-17,30,9,-123,127,-36,-88,22,127,-61,-34,-83,126,-35,127,-19,54,-36,-55,36,8,-34,-69,127,47,127,37,5,-1,127,27,-94,47,-37,-36,-103,41,96,103,27,-57, 127,127,127,127,-45,-127,127,23,127,-127,17,-127,-107,127,127,127,-15,-127,-62,-127,127,23,-67,127,127,127,-54,-127,127,127,-127,127,-10,-127,-127,127,-127,-46,98,109,-127,-127,127,127,127,-119,-109,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-40,40,-104,-27,-69,-69,127,127,-69,127,127,-107,-127,127,-43,127,-127,-127,-127,123,-75,127,-42,127,78,127,-38,-127,-25,-105,-127,-127,-22,-127,-20,-127,-127,116, -23,66,-39,3,127,69,-21,48,4,24,-12,-4,-25,-30,-14,-7,-103,-22,-127,39,30,76,-13,-114,-34,-42,127,72,10,33,70,8,125,-49,127,-3,55,5,-97,14,36,23,-22,0,-22,-54,-13,-42,81,14,-12,39,-6,-4,-74,-13,25,19,127,-88,3,127,-1,-36,-112,-27,-78,98,17,-17,111,25,-18,-55,13,47,-27,-9,-44,-2,-47,11,46,24,-89,34,127,-46,32,-22,127,-8,-110,34,33,21, 
  /* [0][2][][] */ -4,-38,-22,-59,-4,13,40,31,-3,10,-20,53,27,-35,-6,7,40,2,15,23,-9,31,-18,-25,1,-24,11,3,-10,-9,49,-76,-38,70,-29,-25,30,-35,-62,17,10,9,-33,20,12,-78,-13,0,-9,7,17,-9,7,1,-23,6,-1,44,-46,37,-5,-11,6,17,-7,-10,24,-53,-55,12,-19,-11,-120,-33,-2,18,15,-11,56,16,24,22,-39,15,13,27,-20,11,8,25,22,-4,20,41,-7,-29, -27,-8,-28,24,-44,74,-25,66,7,-6,54,-11,127,-7,-16,-15,-1,-41,-55,23,-22,79,-47,-108,-47,-48,103,69,13,43,53,-3,-123,65,-16,-23,-28,-27,-127,-4,46,-14,-15,37,-23,-43,-20,-47,-60,26,68,23,-12,-80,30,52,19,24,76,-52,21,-58,-8,-1,20,-26,-127,-54,-10,-26,-62,25,36,-47,-31,-7,-44,24,-59,1,51,39,17,10,6,62,-92,127,19,127,-30,-17,118,-19,46,83, -8,-32,-27,29,13,64,-43,11,3,-8,1,15,13,-51,-8,-11,-44,-7,22,21,-25,5,-22,4,-4,20,0,52,-3,-7,33,29,18,44,19,-22,-6,-26,-36,8,11,-11,23,9,-71,-32,-14,5,-2,-17,-1,-5,-10,9,-16,-4,0,-50,14,-29,-21,49,8,-28,-10,-2,32,-55,46,7,53,-19,29,-54,-18,22,11,11,-7,22,-30,35,86,-14,-16,55,39,-8,113,13,3,-18,13,-22,-7,-48, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0068683605641126633, 0.0046951286494731903, 0.0087275169789791107, 0.0017717721639201045, 0.0056877098977565765, 0.0070853764191269875, 0.012853220105171204, 0.0035865784157067537, 0.0065178261138498783, 0.016111444681882858, 0.0059021813794970512, 0.013310091570019722, 0.00471878657117486, 0.017057294026017189, 0.0071945725940167904, 0.0054705040529370308, 0.0045703244395554066, 0.014347272925078869, 0.0026378019247204065, 0.010911219753324986, 0.0020294564310461283, 0.0073510007932782173, 0.0065700486302375793, 0.01502855122089386, 0.0097930710762739182, 0.0088001219555735588, 0.0049181664362549782, 0.0069058551453053951, 0.0049169962294399738, 0.0053914450109004974, 0.0046550226397812366, 0.00757943419739604, 0.0053383507765829563, 0.0059982165694236755, 0.0080039752647280693, 0.0062035568989813328, 0.014482640661299229, 0.0048691527917981148, 0.001992751145735383, 0.0063714873977005482, 0.0090827811509370804, 0.012608994729816914, 0.014934667386114597, 0.0065106051042675972, 0.0068991896696388721, 0.0023043481633067131, 0.009952738881111145, 0.0083276201039552689, 0.0034139263443648815, 0.0075399721972644329, 0.0092606330290436745, 0.0048611164093017578, 0.0090134013444185257, 0.011129949241876602, 0.010674154385924339, 0.024089107289910316, 0.013945554383099079, 0.0088134510442614555, 0.0044835139997303486, 0.0033576539717614651, 0.01428457535803318, 0.005804847925901413, 0.010960695333778858, 0.005057385191321373, 0.0071991332806646824, 0.0083643412217497826, 0.0033525340259075165, 0.0034852160606533289, 0.014277204871177673, 0.0086764488369226456, 0.0076674115844070911, 0.0041834497824311256, 0.0048458976671099663, 0.0061034993268549442, 0.0073266834951937199, 0.0094362162053585052, 0.019945956766605377, 0.0021651252172887325, 0.0096437986940145493, 0.012632992118597031, 0.0064982622861862183, 0.018449587747454643, 0.0058388677425682545, 0.006577957421541214, 0.0049742283299565315, 0.0034692797344177961, 0.0051830457523465157, 0.0072058686055243015, 0.00824766606092453, 0.0051550944335758686, 0.0073469625785946846, 0.0052399369888007641, 0.0057772295549511909, 0.016664890572428703, 0.35039392113685608, 0.0033397362567484379, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 10586, -9795, 3544, 49403, -2594, -4038, -11109, 2875, -2577, 1021, 2795, -1781, 1327, -5493, 5907, -6228, -810, 17478, 25021, 2096, 2145, -2065, 1369, -421, 15751, -1656, -1873, -3414, -6091, -6487, 8431, -8945, 285, -898, -327, 15865, 1574, -4172, 21754, -179, -349, 2001, -10004, -7143, -8473, 66938, 1580, 17290, 32791, -12951, -348, 10487, 7678, -315, -6055, 2537, -12226, 2165, 1308, -7916, -1684, -1242, -12444, -511, 1638, 14822, 29584, 21221, -13040, -55, -10347, -826, 51075, 10203, 518, 42, 17889, 35759, -463, -6463, -2116, -4742, 388, -3252, 47, 3837, 1050, -848, 745, -2943, 116, -1166, -537, -939, 154, 48015, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.00016160849190782756, 0.00011047361476812512, 0.0002053533389698714, 4.1688756027724594e-05, 0.00013382846373133361, 0.00016671474440954626, 0.00030242869979701936, 8.4390085248742253e-05, 0.00015336061187554151, 0.00037909281672909856, 0.00013887486420571804, 0.00031317863613367081, 0.00011103027645731345, 0.00040134810842573643, 0.00016928405966609716, 0.0001287177437916398, 0.0001075370455509983, 0.00033758289646357298, 6.2065926613286138e-05, 0.00025673458003439009, 4.7751917009009048e-05, 0.00017296473379246891, 0.00015458937559742481, 0.00035361296613700688, 0.00023042521206662059, 0.00020706169016193599, 0.00011572156654438004, 0.00016249071632046252, 0.00011569403432076797, 0.00012685752881225199, 0.00010952994489343837, 0.00017833962920121849, 0.00012560826144181192, 0.0001411345147062093, 0.0001883288350654766, 0.00014596604160033166, 0.00034076801966875792, 0.00011456830543465912, 4.6888264478184283e-05, 0.00014991735224612057, 0.00021371249749790877, 0.00029668223578482866, 0.00035140395630151033, 0.00015319071826525033, 0.00016233387577813119, 5.4219959565671161e-05, 0.00023418209457304329, 0.00019594401237554848, 8.0327678006142378e-05, 0.00017741111514624208, 0.00021789724996779114, 0.00011437921057222411, 0.00021208003454376012, 0.0002618811558932066, 0.00025115656899288297, 0.00056680251145735383, 0.00032813069992698729, 0.00020737532759085298, 0.00010549445141805336, 7.9003621067386121e-05, 0.0003361076524015516, 0.00013658465468324721, 0.00025789873325265944, 0.00011899730452569202, 0.00016939138004090637, 0.00019680803234223276, 7.8883153037168086e-05, 8.2005084550473839e-05, 0.00033593425177969038, 0.00020415174367371947, 0.00018040968279819936, 9.8434116807766259e-05, 0.00011402112431824207, 0.0001436117454431951, 0.00017239255248568952, 0.00022202862601261586, 0.00046931664110161364, 5.0944123358931392e-05, 0.00022691291815135628, 0.00029724687919951975, 0.00015290029114112258, 0.00043410796206444502, 0.00013738512643612921, 0.00015477546548936516, 0.00011704066855600104, 8.1630110798869282e-05, 0.00012195402086945251, 0.00016954985039774328, 0.00019406274077482522, 0.00012129633978474885, 0.00017286970978602767, 0.00012329264427535236, 0.00013593480980489403, 0.0003921150928363204, 0.0082445628941059113, 7.858203025534749e-05, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ -4,7,-6,19,36,58,-20,-22,43,6,22,4,-5,9,15,59,-13,-6,-5,1,92,-48,-2,-18,-28,-30,-45,-95,-8,2,40,38,105,-12,1,-3,9,-9,-23,4,-28,13,13,-23,-10,-27,-16,28,-13,17,-1,-6,-42,-13,-10,5,33,30,-21,-30,-58,28,-21,-15,18,8,56,18,19,-7,-7,-25,-62,-2,6,-2,0,-80,7,-13,23,-28,-53,-45,28,-15,0,17,-4,10,14,-21,26,14,-6,127, 
  /* [1][0][][] */ 63,-99,49,92,-11,-90,-19,-35,-27,-82,-22,34,9,-86,-28,-47,-102,7,22,0,-56,-121,-31,16,127,-49,-89,34,-27,113,-22,77,9,7,-48,17,-25,-31,45,-21,1,-92,85,-41,-79,8,72,-6,17,19,0,-51,82,-85,31,-37,33,17,-16,-115,24,-79,9,-52,23,-65,13,33,38,67,-47,-12,-100,16,-28,78,50,84,16,-17,46,-30,-87,26,-84,92,-25,74,-56,52,33,-12,-18,-57,33,-11, 
  /* [2][0][][] */ 18,25,9,-13,-2,-16,7,57,61,-1,-2,53,1,0,56,4,-15,-13,6,-16,-32,-62,4,-70,-15,-15,-33,35,-22,29,127,-62,22,-74,-24,63,14,112,-72,-17,-8,-21,0,46,-57,-63,-46,18,25,20,-11,-30,34,4,-12,-37,-26,-15,0,21,0,8,64,97,21,-75,19,-71,-18,-16,-22,27,-39,11,-38,21,19,54,3,30,-8,71,36,-24,1,9,-10,15,29,24,0,-75,-66,-4,-2,48, 
  /* [3][0][][] */ -22,-8,-48,32,34,-11,-8,-32,-12,15,-2,8,23,-12,52,-3,54,-36,26,7,-17,-13,-13,-8,-17,4,20,2,13,-54,68,-28,36,1,-11,49,-6,-7,-21,19,8,-75,25,-29,14,5,11,-2,-127,35,-15,19,-114,-46,-19,-32,17,10,-9,59,1,27,21,25,-18,-97,-44,16,49,18,-1,41,-40,9,-25,-42,-56,-56,30,-39,2,-9,20,76,33,49,37,12,30,-17,-4,5,-35,8,-29,-43, 
  /* [4][0][][] */ -6,-31,17,-67,10,-5,-38,4,-29,-44,-39,-15,18,73,9,3,66,-15,3,-2,-3,35,54,12,-9,2,27,3,8,-8,-11,-4,-46,23,1,13,43,-15,2,-16,13,5,-108,-32,44,-2,-13,-12,-1,80,-15,-24,-19,-8,14,1,2,-36,12,25,0,-4,9,-6,29,-114,26,-15,-47,20,-20,-2,-14,11,-23,25,-16,70,55,-5,11,18,127,-41,41,-34,1,-7,69,18,2,14,-23,20,-4,-45, 
  /* [5][0][][] */ -13,1,9,4,-10,-14,4,110,47,-5,-21,-34,-17,27,39,22,-19,-13,0,-36,-51,-11,-2,-45,9,15,22,61,67,14,55,47,-56,12,-4,-14,-57,-47,-32,-1,-39,-20,-9,-7,46,6,9,15,8,3,-6,16,-18,-5,-3,-11,-2,-26,-7,23,-48,14,-29,-45,18,21,-20,5,0,13,7,-1,17,7,4,-2,3,14,11,112,-11,-57,25,22,18,1,5,-19,-10,-3,20,-127,-40,-23,-2,-102, 
  /* [6][0][][] */ -26,-15,4,-52,-11,-32,-11,27,0,33,-14,-11,25,-57,6,-18,-16,-74,25,19,-7,1,-18,31,80,1,-11,-6,20,3,6,0,-32,-15,-33,3,5,6,27,41,0,-30,-49,-26,-24,-27,31,-127,12,38,27,21,11,-3,-10,-45,43,-4,2,-2,20,12,-15,-4,45,71,28,-21,-14,-14,8,-34,18,7,61,-9,-15,25,9,14,-15,-24,54,-40,19,49,15,-22,25,18,-35,-13,-26,3,-2,27, 
  /* [7][0][][] */ 15,20,39,-23,-4,-9,-9,-18,-1,-5,-18,-23,-11,-91,30,2,-4,-29,-27,-11,6,-18,-41,-3,-19,-6,-4,-19,1,14,1,-3,-12,7,-7,-26,-2,-17,-42,27,11,-18,-19,28,-16,12,-16,77,-7,20,-11,-15,-23,8,-3,-67,31,-1,0,-3,-7,1,-21,-1,-9,48,13,-36,-11,-1,-7,40,-9,-7,-18,10,49,8,2,-5,0,-57,40,-1,-26,127,-18,-1,-46,-2,0,13,-23,-10,-8,5, 
  /* [8][0][][] */ -73,14,-38,12,40,-12,-10,40,15,82,-35,3,5,19,51,-11,-19,30,-74,27,19,23,-23,-2,-44,-14,23,12,46,-77,-4,2,12,6,11,-17,-25,19,-36,56,10,14,4,-127,-49,-22,43,-18,-45,16,2,73,-94,76,-2,-7,18,-19,-28,-22,-5,-37,-5,7,-26,34,15,-16,2,-11,33,68,-21,31,42,23,-3,-92,4,-25,-12,-38,21,-7,-39,10,1,-33,7,61,-24,-2,33,-18,-12,-8, 
  /* [9][0][][] */ 32,-51,-36,-39,18,25,-17,13,31,-39,-5,21,-41,-19,-2,22,-6,8,40,-23,-20,8,-32,-55,32,7,25,-6,-33,-45,-10,-11,-3,10,24,36,13,37,-19,16,20,13,-16,-82,14,-9,28,-127,-25,-2,-10,25,-18,-3,-14,-6,-49,27,-14,14,0,13,23,20,22,110,31,37,2,-13,20,-22,-15,3,-38,6,58,-3,11,15,-11,18,10,-42,-3,43,0,6,-48,3,-33,-1,-2,15,-1,-24, 
  /* [10][0][][] */ 34,60,-20,40,62,-124,-13,-18,0,44,23,-2,-10,32,26,-72,14,40,-36,28,-96,-10,-19,-25,-56,-21,-59,51,21,13,-11,50,-16,-7,25,-14,79,-22,-28,0,-21,57,47,-15,-62,-10,-50,9,-25,-16,-32,-5,-15,0,7,-23,27,14,-30,-18,3,5,-23,29,13,58,62,28,35,2,32,61,-49,-25,-63,-17,10,31,-31,1,28,-18,-64,-38,58,-50,80,-2,-33,30,27,-26,83,34,-16,-127, 
  /* [11][0][][] */ 34,25,-22,27,6,12,60,7,5,-8,-16,-9,-2,-3,28,11,-10,-2,-88,-9,9,16,-2,-9,-43,-19,-4,7,0,22,-2,-11,-10,-7,3,18,10,17,-6,22,4,20,62,-106,23,-43,-9,3,-127,13,4,-41,19,18,-18,14,-10,-7,6,0,14,-8,-11,5,-46,53,-22,12,20,-8,27,10,-56,-36,21,24,-3,-34,-52,2,9,-7,93,43,14,-7,-16,-15,1,32,-21,2,8,8,-19,16, 
  /* [12][0][][] */ -45,-26,14,7,-29,26,31,10,127,32,-22,-5,0,-2,-35,-54,22,23,23,78,49,44,-1,-23,1,2,23,-29,-109,14,22,-52,-1,-20,-11,-18,17,5,32,-20,-56,-10,-4,9,-9,36,16,9,9,-3,-40,25,10,3,10,0,59,-22,17,7,21,-23,5,-23,8,27,-39,21,2,0,-22,-45,6,10,-70,16,30,6,20,-70,-16,-11,45,40,-6,-17,-15,-36,11,23,-4,45,-22,-34,19,17, 
  /* [13][0][][] */ 29,-8,-30,22,31,2,-4,-4,-5,-2,2,2,12,-18,5,-14,15,-76,-34,12,-2,-13,7,-10,7,-2,-1,-9,-8,-36,-6,14,5,7,11,51,16,-1,17,9,-1,4,20,42,24,29,-8,-127,20,4,4,2,-18,-4,24,7,-14,8,18,10,13,16,-3,6,-9,-21,-10,-54,2,16,-5,-37,-16,33,-11,20,-26,9,15,-8,26,-3,-17,24,5,30,15,12,-11,-22,27,-7,7,12,-10,-15, 
  /* [14][0][][] */ -101,-50,13,46,35,-20,-39,1,-8,-7,0,22,56,3,-127,10,78,-8,-11,24,-1,-9,30,15,-105,-2,34,-6,-36,-81,-24,-2,7,9,28,-54,36,36,4,12,19,39,0,-34,33,115,63,46,-99,47,4,27,-52,-11,39,0,1,13,60,63,36,54,25,54,-12,-23,-44,41,2,77,-47,-79,-69,5,-6,40,-15,41,79,-4,63,41,34,33,32,6,55,32,28,16,63,7,7,33,12,-30, 
  /* [15][0][][] */ 85,-12,46,-9,1,69,27,-23,-1,45,14,5,-65,-11,-15,33,-1,40,50,-17,15,22,-91,42,19,6,39,-7,31,46,-55,-74,11,-65,38,16,44,-27,-40,-92,3,20,-5,45,-18,64,-21,-19,96,-33,-57,15,29,-127,54,-85,4,-59,2,15,-98,-7,32,16,78,-13,-35,37,-28,55,-25,7,54,15,25,3,30,-34,68,-1,-19,17,30,84,-21,14,-5,-58,-3,-13,54,4,-51,54,16,-10, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.020972145721316338, 0.010366166941821575, 0.011336000636219978, 0.010085065849125385, 0.013254842720925808, 0.015972275286912918, 0.016118796542286873, 0.017676485702395439, 0.0091307051479816437, 0.010763364844024181, 0.014622107148170471, 0.027899822220206261, 0.016178028658032417, 0.021153520792722702, 0.021935306489467621, 0.014898350462317467, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -3252, 1843, -1636, 35561, 27241, 5445, -8634, -2863, 22048, 5509, 26289, 23023, -12235, 14553, 33067, -32377, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 0.00049346225569024682, 0.00024390981707256287, 0.00026672941748984158, 0.00023729566601105034, 0.00031187865533865988, 0.00037581825745292008, 0.00037926580989733338, 0.00041591731132939458, 0.00021484012540895492, 0.00025325565366074443, 0.00034404959296807647, 0.00065646640723571181, 0.00038065950502641499, 0.00049772992497310042, 0.00051612488459795713, 0.00035054943873547018, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -10,71,-7,96,20,53,0,-19,39,17,-65,95,-7,-123,21,-127, 
  /* [1][0][][] */ 25,37,-16,-31,18,-13,127,-90,13,91,-21,4,7,-48,29,-6, 
  /* [2][0][][] */ -127,23,-36,-7,-3,-22,39,78,-9,52,108,-5,-63,24,40,-48, 
  /* [3][0][][] */ -67,19,14,43,-42,85,110,127,17,75,-108,1,25,-48,-59,-70, 
  /* [4][0][][] */ 9,5,21,50,-23,65,20,54,23,-9,-1,6,17,-7,-127,-19, 
  /* [5][0][][] */ -14,-25,57,-8,7,-19,-9,29,-66,104,-26,-127,-16,27,-61,-28, 
  /* [6][0][][] */ -7,20,53,-17,35,51,-61,-66,10,-12,64,-16,127,-16,-13,-26, 
  /* [7][0][][] */ 40,11,127,-32,-34,-41,11,-7,-98,25,-94,-50,22,-7,51,-13, 
  /* [8][0][][] */ 59,24,64,59,-55,116,53,72,40,27,1,-66,-37,15,-127,-97, 
  /* [9][0][][] */ 43,-117,71,62,3,-31,-1,59,127,6,63,-16,-6,30,-96,-60, 
  /* [10][0][][] */ -36,-101,27,-19,-87,19,-16,44,103,127,62,-24,-59,88,82,4, 
  /* [11][0][][] */ 58,-12,-5,-70,-9,-30,-89,-127,-59,38,-34,-36,36,-23,24,-61, 
  /* [12][0][][] */ -40,-10,4,-43,-45,-58,-93,-23,-46,-69,-14,-3,37,127,101,52, 
  /* [13][0][][] */ -48,-86,-60,28,-18,-77,-14,-13,55,-4,-1,-18,7,29,127,42, 
  /* [14][0][][] */ -11,-50,43,24,3,52,5,127,20,43,19,-22,13,26,-63,103, 
  /* [15][0][][] */ 24,-39,-13,64,15,-14,94,-6,9,-127,13,-34,10,-28,-1,-44, 
  /* [16][0][][] */ 38,-65,-33,40,2,7,28,-67,127,81,86,-4,15,85,49,96, 
  /* [17][0][][] */ -113,-99,53,105,127,66,-17,-66,111,-68,-4,-69,-38,17,-117,69, 
  /* [18][0][][] */ -22,15,33,60,-89,-5,-26,28,-76,-32,-32,-57,11,-127,50,-1, 
  /* [19][0][][] */ 28,-87,48,-113,116,11,-115,103,115,-84,127,33,-23,71,75,109, 
  /* [20][0][][] */ 39,-27,69,-58,-2,1,-25,43,3,-54,77,-5,-7,18,-43,127, 
  /* [21][0][][] */ -53,1,9,-49,31,38,-57,-41,-60,77,4,-7,-127,-22,0,-35, 
  /* [22][0][][] */ 32,-30,43,-8,29,-99,-11,-12,-127,18,-27,-70,-21,7,81,-5, 
  /* [23][0][][] */ 14,0,32,-21,3,18,-19,-4,0,-16,43,-10,127,-4,6,-31, 
  /* [24][0][][] */ -14,20,-3,-69,-15,-15,54,13,-51,13,-5,-127,-14,-98,30,6, 
  /* [25][0][][] */ -88,-44,-47,-37,127,-51,-51,-110,-59,67,-27,-92,-81,-21,22,-97, 
  /* [26][0][][] */ 35,8,67,-102,127,-7,7,5,121,-52,42,-7,20,117,-21,69, 
  /* [27][0][][] */ 104,-42,31,-32,-31,-59,-11,-27,-40,16,-127,3,21,-25,1,43, 
  /* [28][0][][] */ -106,-37,-127,-90,55,-10,78,-51,-5,51,-78,15,39,-13,-43,52, 
  /* [29][0][][] */ -82,-48,-5,127,-34,3,11,-41,11,2,-85,32,41,-72,48,-29, 
  /* [30][0][][] */ 72,-27,127,-26,75,65,-40,78,-44,-124,51,-4,11,28,-53,93, 
  /* [31][0][][] */ 23,-77,17,-51,12,-55,16,-37,-12,48,112,29,-20,100,52,127, 
  /* [32][0][][] */ -9,70,-32,39,-127,25,-68,-34,-50,-30,4,41,0,56,32,67, 
  /* [33][0][][] */ 32,-17,31,127,26,7,25,-41,-90,53,54,-19,6,3,-2,90, 
  /* [34][0][][] */ 23,5,31,14,82,-17,-127,-30,-52,105,-40,-33,-41,-13,-17,9, 
  /* [35][0][][] */ 54,14,-18,-8,16,-127,-22,-11,-7,5,-66,4,50,23,1,25, 
  /* [36][0][][] */ 12,0,-127,-5,43,15,-32,20,-30,-23,8,-18,2,5,-16,11, 
  /* [37][0][][] */ 19,-13,127,1,-53,37,12,-57,-9,29,-70,41,26,-2,20,5, 
  /* [38][0][][] */ -127,22,-10,33,15,85,3,-38,17,-11,126,-12,-31,3,-4,-35, 
  /* [39][0][][] */ -20,9,13,35,39,-6,-127,43,10,32,0,-31,-3,-26,-15,-7, 
  /* [40][0][][] */ -13,85,-78,125,2,67,60,10,-127,-44,-36,67,13,20,-51,-36, 
  /* [41][0][][] */ 11,16,-39,-18,-66,13,127,115,-51,91,-33,21,-24,95,36,-13, 
  /* [42][0][][] */ 78,-44,0,2,21,35,-49,123,76,-73,127,42,-11,1,-120,17, 
  /* [43][0][][] */ -74,-4,28,-44,31,13,-76,-89,-28,24,-2,2,-127,-6,31,-15, 
  /* [44][0][][] */ 28,-13,-20,-3,-11,-18,-4,-40,127,-2,-2,45,21,75,-4,58, 
  /* [45][0][][] */ -69,-102,18,-104,39,-26,-28,50,0,-106,-27,-12,27,113,-30,127, 
  /* [46][0][][] */ -41,12,-40,96,-77,-15,20,-74,-127,61,-47,-20,-16,28,1,-42, 
  /* [47][0][][] */ -19,-18,-59,127,4,60,5,6,31,38,36,45,-10,-8,32,-28, 
  /* [48][0][][] */ 14,-3,51,-127,28,-3,7,13,-42,24,4,-4,-4,56,29,28, 
  /* [49][0][][] */ -31,13,57,127,25,74,-62,13,54,-93,-28,3,13,-22,-54,-114, 
  /* [50][0][][] */ 19,96,32,-127,61,28,-24,58,117,-24,-37,-1,2,-62,29,-18, 
  /* [51][0][][] */ 30,-27,20,-7,43,-7,-99,-127,-3,-88,-20,18,19,-25,9,-28, 
  /* [52][0][][] */ 5,21,-3,59,51,-40,-76,75,-69,127,-29,-13,109,98,7,-25, 
  /* [53][0][][] */ 9,106,19,-79,-19,-3,29,-6,-50,-35,-33,56,9,-127,-59,-15, 
  /* [54][0][][] */ 1,8,21,36,52,-24,5,-42,1,30,-17,-19,-6,127,-46,-10, 
  /* [55][0][][] */ -104,127,87,-26,43,-1,7,6,-33,27,92,-5,-17,-24,104,1, 
  /* [56][0][][] */ 69,-18,-3,-85,68,-8,-26,14,33,-41,26,127,-36,2,79,46, 
  /* [57][0][][] */ -38,2,22,59,-34,31,43,127,-12,14,6,-45,-7,48,7,19, 
  /* [58][0][][] */ 8,116,-2,-127,-7,35,-28,8,92,-20,10,70,-8,-83,59,66, 
  /* [59][0][][] */ 39,29,57,-82,-49,-8,36,-5,21,28,17,-67,0,-127,-62,12, 
  /* [60][0][][] */ 48,-2,106,-47,-31,127,23,-39,-4,41,-46,3,27,16,44,3, 
  /* [61][0][][] */ -33,18,-54,-52,-56,5,127,126,-19,92,-8,4,8,81,8,-41, 
  /* [62][0][][] */ -6,-22,-28,9,-63,35,-61,-10,-57,-12,-26,-53,20,-127,51,-3, 
  /* [63][0][][] */ 8,-31,-17,-59,24,-12,-127,-124,-55,87,-40,-9,75,6,3,-36, 
  /* [64][0][][] */ -29,0,24,46,65,-14,-17,-127,34,-103,0,-55,-3,-13,0,12, 
  /* [65][0][][] */ -127,22,12,-73,5,80,55,-35,-63,29,21,13,1,26,-9,-32, 
  /* [66][0][][] */ 57,9,78,20,-54,14,-15,54,-50,8,70,-98,-19,65,-127,-19, 
  /* [67][0][][] */ 15,-45,-7,76,72,-39,-82,-127,51,-110,-86,-23,-80,12,-74,34, 
  /* [68][0][][] */ -10,-12,-72,62,-69,-89,20,-51,-42,-22,66,-88,-26,62,127,-30, 
  /* [69][0][][] */ -7,35,-72,41,-12,-127,47,119,26,0,42,5,122,23,-42,29, 
  /* [70][0][][] */ 2,23,-35,-30,-36,24,127,113,-14,62,-20,1,31,47,5,-13, 
  /* [71][0][][] */ 0,-6,-30,-49,23,10,12,56,-26,-33,-5,11,13,-127,73,1, 
  /* [72][0][][] */ 28,24,-16,49,14,-55,-60,-127,-6,49,-48,10,45,54,52,50, 
  /* [73][0][][] */ -49,-127,-26,-47,-68,-17,49,-15,-12,9,-25,-19,-3,-27,53,-22, 
  /* [74][0][][] */ -27,17,62,78,-3,-16,-127,88,19,-46,-43,-44,-3,-2,-8,10, 
  /* [75][0][][] */ -65,43,-34,19,-24,95,81,119,-10,49,10,-44,-127,80,14,10, 
  /* [76][0][][] */ 20,-43,-56,7,45,-51,-127,-106,-33,1,6,-4,36,9,62,-45, 
  /* [77][0][][] */ -26,10,-33,-17,-52,-1,-15,-39,127,10,-72,-2,-2,41,25,-82, 
  /* [78][0][][] */ -107,-127,4,109,72,85,-38,50,-12,-88,-119,88,69,-28,112,80, 
  /* [79][0][][] */ 37,-11,24,-55,127,14,31,5,66,16,3,28,-3,-27,8,-36, 
  /* [80][0][][] */ -3,-42,41,-76,-15,-38,0,25,-46,-38,-6,-44,-8,127,-7,31, 
  /* [81][0][][] */ 33,-11,27,56,18,74,-15,-32,22,13,-15,-27,10,27,-127,-3, 
  /* [82][0][][] */ -59,-7,23,-127,3,-27,2,-23,-48,-25,-14,-80,5,-89,-81,23, 
  /* [83][0][][] */ 12,15,11,-55,-59,25,-10,57,-116,1,2,-108,27,-127,15,43, 
  /* [84][0][][] */ 127,39,33,53,-55,-1,-36,39,-6,-21,95,-1,-50,21,69,-82, 
  /* [85][0][][] */ -3,-11,32,-34,33,-7,-51,98,-69,-104,-63,-35,-18,73,79,-127, 
  /* [86][0][][] */ -6,30,30,-27,-33,50,-52,47,-102,-88,58,-44,-27,-127,-5,50, 
  /* [87][0][][] */ 118,-32,20,-5,-52,-40,9,-3,11,20,-127,20,29,-11,-15,24, 
  /* [88][0][][] */ 29,54,-8,51,12,-44,-40,-34,108,16,40,31,-62,-36,127,-103, 
  /* [89][0][][] */ 46,69,-76,0,-43,-26,35,-60,45,50,32,-39,-61,3,-38,-127, 
  /* [90][0][][] */ -11,3,-5,-71,-70,17,127,-30,57,-60,18,-60,48,-12,-42,-17, 
  /* [91][0][][] */ 3,32,3,-105,-44,-9,55,-21,-33,24,60,28,8,-21,14,127, 
  /* [92][0][][] */ 22,-3,-12,4,59,-7,-57,-127,30,-57,-20,-28,-46,-30,-11,-32, 
  /* [93][0][][] */ 78,-1,25,-127,-35,-3,-28,41,49,-63,71,9,-49,100,-32,7, 
  /* [94][0][][] */ -95,51,-110,13,73,-127,-18,10,4,-69,61,-15,-2,17,-2,18, 
  /* [95][0][][] */ -29,53,19,-127,-1,-4,4,5,2,-18,-41,-58,1,19,-65,-19, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.00080196367343887687, 0.00075700314482674003, 0.00048409280134364963, 0.00025609409203752875, 0.00064436683896929026, 0.00079757499042898417, 0.001294761779718101, 0.00099334272090345621, 0.00018390914192423224, 0.00098721066024154425, 0.00089806132018566132, 0.0007711082580499351, 0.00041737803258001804, 0.00056911137653514743, 0.00028452847618609667, 0.0015208323020488024, 0.00071270758053287864, 0.00045342740486375988, 0.00054469052702188492, 0.00048690557014197111, 0.0010119096841663122, 0.0017094978829845786, 0.00058608595281839371, 0.0016929609701037407, 0.0020169208291918039, 0.00079613097477704287, 0.0005045319558121264, 0.00058862846344709396, 0.0009420668357051909, 0.00028335265233181417, 0.00015406370221171528, 0.00054387812269851565, 0.00077040342148393393, 0.0010162965627387166, 0.00060437561478465796, 0.00094227842055261135, 0.0010748108616098762, 0.001237101387232542, 0.00044584774877876043, 0.0024984783958643675, 0.0004816301807295531, 0.00042893525096587837, 0.00021892887889407575, 0.00099394074641168118, 0.00038107676664367318, 0.00048685297952033579, 0.00078795460285618901, 0.0006375104421749711, 0.0002990926441270858, 0.00085812044562771916, 0.00065677677048370242, 0.00057534879306331277, 0.0011375279864296317, 0.00086139613995328546, 0.0012672850862145424, 0.00049932074034586549, 0.00059962098021060228, 0.00036089221248403192, 0.00096574396593496203, 0.00058624037774279714, 0.00090568338055163622, 0.00021213910076767206, 0.00066755514126271009, 0.00062544288812205195, 0.00079774478217586875, 0.00069733604323118925, 0.00068672938505187631, 0.0007500331848859787, 0.00070966081693768501, 0.00074592517921701074, 0.00057378294877707958, 0.000476398243336007, 0.0003637265763245523, 0.00080565485404804349, 0.0014147022739052773, 0.00069453369360417128, 0.00081659707939252257, 0.00099534587934613228, 0.00074845354538410902, 0.001251096953637898, 0.0004593721532728523, 0.00035240116994827986, 0.00063522596610710025, 0.00044415125739760697, 0.0013635565992444754, 0.00084592134226113558, 0.00069508654996752739, 0.00016541208606213331, 0.00046940575703047216, 0.00050847878446802497, 0.0008242481853812933, 0.0014791844878345728, 0.00084319716552272439, 0.00070405215956270695, 0.00061723979888483882, 0.00044502367381937802, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 1887, 6851, 13786, 32206, 16793, -4467, -2230, 5810, 46062, -5059, 10823, 4093, 11150, 14762, 30327, 1345, 2387, 9910, 14871, 8594, -311, 358, 12216, -1350, 4757, -100, 16086, 8795, 6093, 44534, 66168, 16261, 7812, -689, 11939, 2194, 1736, 4228, 21775, -848, 14281, 13373, 44541, -3931, 31188, 11189, 7917, 15010, 49473, 8769, -362, 10410, -3424, -207, -2921, 7975, -713, 18994, 7620, 9237, 6353, 24516, 7883, 5655, 11073, 9816, 6849, -6334, 8581, -3485, 7169, 12131, 20265, 4513, -3993, -7111, 7229, 490, 3638, -1114, 16120, 17257, 5001, 15687, 3021, 394, 11882, 84107, 10762, 16181, 5515, -201, 6140, 8216, 6672, 13839, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00022261858975980431, 0.00021013790683355182, 0.00013438021414913237, 7.108963473001495e-05, 0.0001788709923857823, 0.00022140031796880066, 0.00035941530950367451, 0.00027574383420869708, 5.1051680202363059e-05, 0.0002740416384767741, 0.00024929450592026114, 0.00021405337611213326, 0.00011586074106162414, 0.00015798068488948047, 7.8982790000736713e-05, 0.00042217064765281975, 0.00019784181495197117, 0.00012586775119416416, 0.00015120166062843055, 0.00013516102626454085, 0.00028089788975194097, 0.00047454269952140749, 0.00016269268235191703, 0.00046995218144729733, 0.00055988080566748977, 0.00022099947091192007, 0.00014005396224092692, 0.00016339846479240805, 0.00026151008205488324, 7.8656390542164445e-05, 4.2766827391460538e-05, 0.00015097613504622132, 0.00021385771105997264, 0.00028211565222591162, 0.00016776974371168762, 0.00026156881358474493, 0.00029835873283445835, 0.00034340927959419787, 0.00012376370432320982, 0.00069355726009234786, 0.00013369660882744938, 0.00011906892905244604, 6.0772872529923916e-05, 0.00027590984245762229, 0.00010578380897641182, 0.00013514641614165157, 0.00021872977958992124, 0.00017696770373731852, 8.3025683125015348e-05, 0.00023820724163670093, 0.00018231588182970881, 0.0001597121445229277, 0.00031576849869452417, 0.00023911654716357589, 0.00035178801044821739, 0.0001386073708999902, 0.00016644989955238998, 0.00010018073953688145, 0.00026808265829458833, 0.0001627355522941798, 0.00025141032529063523, 5.8888086641672999e-05, 0.00018530787201598287, 0.00017361785285174847, 0.00022144745162222534, 0.00019357480050530285, 0.00019063048239331692, 0.0002082030987367034, 0.00019699605763889849, 0.00020706275245174766, 0.00015927747881505638, 0.00013224426947999746, 0.00010096753248944879, 0.00022364321921486408, 0.00039270982961170375, 0.00019279689877294004, 0.000226680698688142, 0.00027629992109723389, 0.00020776460587512702, 0.00034729432081803679, 0.00012751796748489141, 9.7823693067766726e-05, 0.00017633356037549675, 0.00012329277524258941, 0.00037851219531148672, 0.00023482087999582291, 0.0001929503632709384, 4.5917047827970237e-05, 0.00013030321861151606, 0.00014114957593847066, 0.0002288045798195526, 0.00041060955845750868, 0.00023406466061715037, 0.00019543914822861552, 0.00017134074005298316, 0.0001235349482158199, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ -46,-72,-10,127,22,72,81,-55,-13,-18,-15,-4,-30,-1,36,2,-9,-44,27,23,21,-127,127,9,-89,11,50,-29,-127,-127,39,24,11,27,60,-18,-30,-10,31,0,-13,27,-109,69,24,-66,36,47,-18,56,-26,19,2,-7,16,49,-93,-48,-63,-22,-10,0,9,38,69,-25,74,14,-9,15,19,127,26,24,26,-2,-9,18,127,-6,-15,17,-28,20,127,20,-72,-16,0,-33,-16,-38,2,-26,-15,26, 127,-127,74,104,-42,127,42,-113,72,5,-18,127,127,-99,-14,16,10,127,127,-112,127,-77,79,70,-127,-112,-67,-34,-55,47,-60,-19,-90,54,-127,-86,-43,-13,-53,74,0,127,127,81,-52,-110,-111,-49,-15,-127,42,83,72,-32,44,85,-48,42,-82,-116,-43,-42,-61,66,75,-60,25,30,-81,31,-19,92,119,127,12,20,3,60,-34,53,64,127,127,-24,-9,75,-111,127,-121,-104,4,-127,-90,-127,-38,106, -75,-14,28,-82,15,-25,68,-8,84,-34,-28,19,-20,-6,-8,-14,-9,-18,8,-4,-18,-96,32,-1,-120,94,7,-54,116,51,-15,10,1,15,15,-31,-10,36,20,18,25,12,-119,64,15,-19,36,16,-15,15,-17,4,-10,1,-2,21,-66,5,-35,54,3,40,34,0,-4,-38,-33,25,8,3,-3,37,11,-23,-5,3,-10,-6,-86,3,-22,-21,-19,3,-110,9,-34,-22,-53,23,-25,-32,31,-26,-14,1, 
  /* [0][1][][] */ -65,-73,72,-36,-47,92,18,127,-51,-21,-1,-118,25,-116,78,32,-2,-62,-16,89,50,-74,48,50,-99,-9,127,-24,-27,65,122,-104,-127,91,-85,-58,-36,33,-29,105,-47,-26,-6,46,-49,127,-24,66,16,100,18,-1,12,-54,27,33,127,121,-73,-87,127,-33,-35,127,73,-39,-16,-2,127,38,127,95,-38,101,-7,11,16,14,-32,8,-44,124,-81,108,2,33,-51,30,78,-127,-32,-5,127,-71,-23,1, 67,125,55,-115,127,81,90,38,-127,127,127,-39,-66,-127,-127,127,127,-65,-125,-51,95,98,-122,127,-110,-88,-42,127,-125,111,-127,-127,-88,127,108,127,127,-127,-106,127,-63,-96,111,-127,-127,-34,-127,-127,127,-112,83,43,127,127,127,-127,99,-127,-127,127,21,-80,-127,-97,-127,127,-127,127,-124,-127,-111,-84,-127,-78,127,127,-127,127,-79,127,127,31,-42,-127,60,127,94,46,127,12,127,2,-68,36,127,-127, -53,-13,-51,39,-56,-99,36,-26,20,-34,-29,94,1,92,14,13,-5,61,-5,127,1,-84,-37,6,-71,103,-70,-19,-69,-15,18,-63,-70,38,5,-19,-29,47,-67,50,127,-4,-39,29,-43,-60,15,46,8,125,-12,6,-36,-72,3,19,97,1,1,22,-34,127,90,-49,-41,13,37,-10,-78,121,-21,-88,2,-51,-18,-21,28,16,77,-34,-72,-39,53,15,-48,-17,71,23,13,63,-43,21,-42,96,-27,-4, 
  /* [0][2][][] */ -67,2,-4,-22,12,-47,61,26,56,-27,-36,0,18,17,-26,4,-8,63,8,0,-55,-83,3,-10,-28,-49,36,-70,89,39,27,26,14,-9,-10,-48,-7,37,-3,1,-14,-6,-68,106,3,32,10,36,-15,-33,7,-20,18,-1,10,15,-72,22,-15,15,16,0,-20,-2,1,-48,-46,12,-33,12,27,29,15,-19,26,3,18,4,-80,-12,-9,-7,17,14,-127,9,12,-44,-61,-51,-27,-47,8,56,-19,-6, 123,32,-127,-36,-72,-27,37,29,-63,-28,-19,-106,-77,111,-13,41,1,-53,-9,-127,82,-60,-37,0,-115,127,-50,20,-34,-20,-8,-6,-61,16,27,5,-23,-28,127,56,12,-14,71,-34,-39,76,-69,-45,-32,-3,-127,-127,-47,-27,1,40,-67,-8,12,37,-6,-19,9,-45,-53,32,63,-22,114,107,-25,-73,15,-55,1,3,101,3,50,21,13,-94,-49,1,4,10,127,39,-63,39,-18,-109,41,80,-10,28, -53,13,-19,26,15,-70,-127,1,-11,-9,-16,6,14,-27,20,-1,-9,-17,6,17,-48,-67,15,1,18,-89,22,3,-49,-39,-6,16,42,-21,-5,-25,-36,3,42,-41,22,-2,-49,-32,1,66,22,15,-9,-3,5,-10,16,6,-4,-5,-62,-14,1,-38,-10,10,83,-9,37,-2,-1,29,-1,4,-4,19,-15,17,0,14,37,1,74,-11,2,-6,-9,-16,74,5,43,-39,57,38,-17,-52,-6,1,-15,-13, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.0044339722953736782, 0.0039635468274354935, 0.0042224028147757053, 0.0095461374148726463, 0.010449154302477837, 0.00763310631737113, 0.0027061039581894875, 0.0036695138551294804, 0.010287024080753326, 0.0073124347254633904, 0.0090033151209354401, 0.004698003176599741, 0.011698677204549313, 0.00892673060297966, 0.016746353358030319, 0.0064486064948141575, 0.0088257146999239922, 0.0066961138509213924, 0.0081022968515753746, 0.0028238638769835234, 0.00346189527772367, 0.0023066233843564987, 0.0060050268657505512, 0.0034427326172590256, 0.0039063813164830208, 0.0045439014211297035, 0.0067321597598493099, 0.0076864417642354965, 0.003180238651111722, 0.021322555840015411, 0.015372981317341328, 0.010104426182806492, 0.005073952954262495, 0.0065699247643351555, 0.01012500561773777, 0.016906881704926491, 0.013932472094893456, 0.0080033028498291969, 0.009930967353284359, 0.0051694237627089024, 0.009843890555202961, 0.0093837855383753777, 0.013112816028296947, 0.0043146363459527493, 0.014867926947772503, 0.0042334916070103645, 0.0044718566350638866, 0.011604531668126583, 0.024107079952955246, 0.0043106875382363796, 0.019064759835600853, 0.0078290253877639771, 0.0099622122943401337, 0.0051866224966943264, 0.0098825125023722649, 0.0054505430161952972, 0.0074785221368074417, 0.018143661320209503, 0.001778826117515564, 0.0065158605575561523, 0.01262342557311058, 0.015126162208616734, 0.0046759224496781826, 0.0067056808620691299, 0.0062850653193891048, 0.0053725810721516609, 0.012876586988568306, 0.015797363594174385, 0.0084707699716091156, 0.004817926324903965, 0.0095520336180925369, 0.0042547020129859447, 0.012948653660714626, 0.0066776750609278679, 0.014857029542326927, 0.012097978033125401, 0.0063946954905986786, 0.0038568100426346064, 0.0023650762159377337, 0.0066694645211100578, 0.009037812240421772, 0.010055174119770527, 0.0065174964256584644, 0.0097423894330859184, 0.0022483770735561848, 0.0050896354950964451, 0.0031878538429737091, 0.021460419520735741, 0.011712739244103432, 0.0051645101048052311, 0.0143089285120368, 0.0015909152571111917, 0.0067727994173765182, 0.0050081862136721611, 0.013353273272514343, 0.011947249993681908, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 22401, 60228, 316, 310, 13671, -4307, -606, -857, 4855, 13971, -5558, -825, 682, 5867, 5007, -9400, -4181, 70, -918, 16602, -10657, 15058, -2754, 8860, 30620, 87, -6590, 17285, 13847, -20205, 1382, 21524, 24650, -11237, 2043, 6, -1093, -1706, 4014, -7482, -5745, 418, -10266, -251, 31873, -1730, 13064, -1523, -15915, 175, 470, 5, -2251, 22632, -3777, 13352, 15810, 386, 36100, 224, -9787, -445, 1310, -995, -3152, 13368, -402, -5958, -3202, 3836, 338, -3321, -471, 162, -2212, -6330, -1218, -1805, 46702, -7968, -5635, -13194, -255, 434, 66937, -12752, -10884, -27273, -5665, 9503, -2842, 30488, 31, -2666, -3293, 876, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00010432876297272742, 9.3259928689803928e-05, 9.9350654636509717e-05, 0.00022461499611381441, 0.00024586246581748128, 0.00017960250261239707, 6.3673032855149359e-05, 8.6341504356823862e-05, 0.000242047623032704, 0.00017205729091074318, 0.00021184270735830069, 0.00011054125207010657, 0.00027526300982572138, 0.00021004072914365679, 0.00039403184200637043, 0.00015173191786743701, 0.00020766387751791626, 0.00015755562344565988, 0.00019064228399656713, 6.6443855757825077e-05, 8.1456360931042582e-05, 5.4273492423817515e-05, 0.00014129474584478885, 8.1005477113649249e-05, 9.1914858785457909e-05, 0.00010691532952478155, 0.00015840376727283001, 0.00018085745978169143, 7.4829149525612593e-05, 0.00050170719623565674, 0.00036171721876598895, 0.00023775121371727437, 0.00011938712850678712, 0.00015458646521437913, 0.00023823542869649827, 0.00039780899533070624, 0.00032782286871224642, 0.00018831301713362336, 0.00023366982350125909, 0.0001216335003846325, 0.00023162095749285072, 0.0002207949582953006, 0.00030853686621412635, 0.00010152085451409221, 0.0003498335718177259, 9.9611570476554334e-05, 0.00010522015509195626, 0.00027304780087433755, 0.00056722544832155108, 0.00010142794053535908, 0.00044858260662294924, 0.00018421236018184572, 0.00023440500081051141, 0.00012203818187117577, 0.000232529710046947, 0.00012824808072764426, 0.00017596523684915155, 0.00042690968257375062, 4.1854731534840539e-05, 0.00015331436588894576, 0.00029702179017476737, 0.00035590969491750002, 0.00011002170504070818, 0.00015778072702232748, 0.00014788389671593904, 0.00012641368084587157, 0.00030297852936200798, 0.00037170268478803337, 0.00019931224233005196, 0.00011336297757225111, 0.00022475373407360166, 0.00010011063568526879, 0.00030467420583590865, 0.00015712177264504135, 0.00034957716707140207, 0.00028465830837376416, 0.00015046342741698027, 9.0748471848201007e-05, 5.564885213971138e-05, 0.00015692858141846955, 0.00021265441318973899, 0.00023659234284423292, 0.00015335285570472479, 0.00022923269716557115, 5.2902989409631118e-05, 0.00011975612869719043, 7.5008327257819474e-05, 0.00050495105097070336, 0.00027559386217035353, 0.00012151788541814312, 0.00033668067771941423, 3.7433299439726397e-05, 0.00015935998817440122, 0.00011783967784140259, 0.00031419467995874584, 0.0002811117738019675, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -19,-17,8,-27,14,-5,-31,0,14,6,-8,5,-6,-11,-26,3,-9,2,-2,-3,7,-24,-1,9,8,7,-3,127,31,-29,43,-10,0,0,12,-2,-9,16,-35,-8,-10,19,2,32,10,19,12,8,30,6,-10,20,15,-17,-12,75,6,14,-32,-32,-4,26,-5,-25,-40,-55,-12,30,4,13,21,-10,-7,-24,-7,-24,-31,25,-2,6,-7,-30,21,22,1,-9,-4,-85,5,-15,9,-2,42,-25,-25,-13, 
  /* [1][0][][] */ 42,-79,-86,-43,117,-11,69,30,-15,-111,-56,-14,-7,-9,-66,72,-78,11,53,63,19,61,-14,-57,11,-17,-30,-68,37,-29,-57,48,-31,32,-3,-10,16,1,2,33,-33,50,-50,-31,-41,127,9,12,46,-70,2,-34,-24,34,52,17,-49,-27,-26,-51,16,-16,0,-41,-94,113,-5,-21,3,-11,-36,28,46,-105,-20,10,37,-52,47,-8,-10,-16,34,0,-53,36,-32,41,32,-60,7,18,38,22,24,113, 
  /* [2][0][][] */ 18,70,-95,5,71,77,37,59,5,-113,-4,-32,-8,-6,30,47,0,-9,-54,80,3,1,83,48,40,22,-23,-20,44,0,49,-66,33,43,-35,41,-127,-84,28,41,10,-54,23,-30,13,-18,3,68,-18,33,-33,-9,81,-12,-12,81,52,7,30,-5,23,26,24,-30,17,-15,-2,-4,-37,25,-30,-24,-66,-84,20,71,80,56,13,6,15,-34,13,-7,-13,41,-7,45,-5,17,-4,-10,5,-38,-89,30, 
  /* [3][0][][] */ 71,37,95,-13,49,-41,9,-10,-7,-77,15,-57,5,29,53,92,41,7,17,6,127,-23,47,19,46,-10,1,8,36,34,-16,84,-112,34,18,11,-17,-26,-5,52,-68,-55,64,11,10,29,-45,-109,-73,-45,-30,11,6,-124,4,31,-115,65,62,33,6,100,-2,-59,37,62,-3,-39,30,-27,-12,-77,55,-60,58,-14,28,-6,40,47,-39,-62,16,-7,-21,16,16,32,29,19,10,33,37,94,29,-33, 
  /* [4][0][][] */ 17,-7,24,-26,127,45,-27,-12,-42,-50,-36,-35,-50,14,-7,40,41,-83,-33,82,-3,5,38,-23,8,-2,22,-46,9,-12,59,-30,95,13,-32,3,39,10,3,11,-11,-20,-29,-33,-11,-50,-7,14,37,5,-6,-13,9,-27,21,-33,11,-27,-32,25,-3,52,65,27,44,53,-25,-12,-53,-8,42,53,34,-81,-40,-23,36,41,92,-36,0,-41,-9,-10,-74,3,36,56,-51,39,5,-35,20,20,28,-36, 
  /* [5][0][][] */ 6,-10,-11,19,21,-12,45,-27,-24,-36,-13,6,3,23,-3,21,-13,-8,13,-6,28,21,-50,72,21,-15,-5,-91,5,36,22,30,-3,-7,9,-60,27,26,0,5,-14,2,26,-19,-1,5,7,-21,-9,-9,2,6,-13,-35,-9,-52,0,17,-29,17,72,15,-5,32,2,37,15,70,8,98,16,35,-7,16,-10,64,-36,-2,8,12,-14,-15,10,17,1,18,-13,127,-3,21,-1,-13,2,16,-62,23, 
  /* [6][0][][] */ 25,-78,10,-26,-30,2,64,12,5,-2,-12,-68,-30,-6,-42,41,6,-16,0,-4,-50,50,-5,1,-11,-15,-36,-7,-9,14,47,-10,41,-1,61,-9,-3,5,15,-103,-27,118,4,-25,11,-12,-22,21,-12,49,-44,96,-30,-67,-12,-11,14,-52,-14,4,-9,57,32,-78,27,-38,9,-29,4,8,127,9,-57,18,-28,16,-98,-7,13,-7,25,28,22,-2,-19,4,45,15,7,-1,41,-44,-15,-6,-19,-10, 
  /* [7][0][][] */ -5,127,45,25,104,48,52,-43,-29,-30,42,-15,-31,28,16,39,3,-46,7,24,28,-19,22,17,2,1,-3,21,24,-20,15,24,50,-17,-38,6,25,18,-6,80,-41,43,28,15,-11,-7,30,-21,-19,-14,25,19,15,-44,-34,46,62,11,-30,-5,-9,-37,-13,-9,-64,74,-23,-93,-6,-31,-5,66,-33,-20,12,7,43,60,35,-7,-44,-41,-7,-12,-12,52,-10,4,-31,26,-36,-30,-52,-4,28,-1, 
  /* [8][0][][] */ -6,-17,53,24,-127,-29,60,-18,38,89,67,19,-17,13,22,17,-60,18,22,12,-37,1,-120,61,26,-53,51,-10,5,19,6,48,59,-34,5,-11,-26,-3,7,31,2,-5,38,31,-36,6,38,15,-108,15,10,48,-73,-51,-41,44,13,-59,-97,-28,11,-28,-37,2,16,67,1,-61,26,-4,-38,-11,36,76,66,-13,-31,-38,-9,12,-101,-1,-13,-5,18,30,72,41,31,-46,55,39,17,3,53,14, 
  /* [9][0][][] */ 20,-101,-24,9,90,73,-23,-23,36,-35,81,89,-12,10,93,-92,14,-20,-14,20,-53,-60,48,-20,-34,19,11,15,-26,4,-6,-19,10,22,-107,12,-2,8,-16,67,27,-75,-34,72,-4,-34,-79,-37,15,15,-23,-83,48,21,-21,-44,-19,73,-9,11,11,-47,-21,127,-73,-8,-2,-11,0,30,-56,-76,47,-5,8,32,72,-74,20,-4,-19,-16,3,23,-7,-58,27,-15,1,-36,-51,24,-50,-30,-18,-42, 
  /* [10][0][][] */ -40,-16,-28,-40,-25,-4,56,-22,35,25,27,28,18,-9,-9,-3,-12,24,-28,-18,-8,38,17,18,-11,-14,2,-118,24,-47,58,-30,8,22,2,-6,-3,29,5,-8,16,-39,31,-60,11,4,27,17,3,38,-18,-20,-26,-15,-8,-58,26,15,-1,-47,26,17,-5,2,-40,100,-10,-30,19,-20,-10,-20,-34,-10,16,57,-5,46,-22,22,-17,2,3,27,13,-18,-17,127,3,-3,13,23,21,-35,42,-30, 
  /* [11][0][][] */ -82,6,0,1,16,-64,-7,4,-44,-10,1,24,21,19,-23,-2,41,11,-54,-49,31,-4,-13,3,77,-3,58,-1,-20,43,-36,17,-14,12,-10,-8,-5,13,27,9,-23,3,3,19,88,28,75,32,58,45,-17,50,8,-62,17,-10,-74,-13,-42,-48,-3,-12,-4,25,0,-20,31,5,19,13,-1,35,-18,28,27,-2,-26,82,-126,67,-36,-13,-56,-70,127,25,46,-13,4,41,-17,-67,-20,60,-20,-7, 
  /* [12][0][][] */ -12,-8,-47,6,68,16,-9,-33,-19,23,18,-6,26,-15,36,-16,-35,-26,9,-16,-20,-29,-35,40,-23,52,-13,93,-22,32,-45,-16,-20,37,20,25,-24,-18,28,4,5,1,-10,2,-23,-23,15,19,-13,-2,0,-34,-8,1,-7,-10,1,-7,23,37,-22,-16,6,59,47,-96,13,35,-36,-127,-10,63,9,12,16,93,12,-15,-12,10,-5,22,-62,9,25,-13,5,-63,4,27,-4,-1,-15,25,-20,29, 
  /* [13][0][][] */ -83,63,-15,-27,-54,9,-22,33,-50,-16,33,19,104,26,-33,-10,-3,31,-48,-8,19,-20,71,-62,82,41,8,-5,7,-25,-38,-79,-85,-29,11,5,-16,11,35,-29,-40,74,7,18,44,-29,-8,-4,40,-27,48,66,75,-75,87,-14,-31,30,43,10,13,31,-12,28,11,-43,-10,5,18,-1,9,-127,21,-26,-87,10,66,47,-44,-41,86,-16,-11,-20,27,-43,102,4,-29,9,-16,15,49,-64,-36,4, 
  /* [14][0][][] */ -31,30,-19,-65,37,-4,-25,35,-92,0,15,11,-20,-63,-73,-40,-76,-5,67,12,39,-20,31,-114,-54,31,-34,-29,16,-24,-16,-35,-74,-17,17,18,-19,-17,6,9,10,65,-82,-10,-62,10,7,7,127,-38,46,-33,38,65,-106,24,-37,25,-102,15,4,30,51,30,13,35,-12,11,-53,16,55,26,52,-23,-26,28,68,-83,-25,-104,19,-26,1,46,30,-75,-46,2,-40,33,35,52,23,31,17,-20, 
  /* [15][0][][] */ -46,-94,-4,-47,3,15,12,-71,-35,29,-7,-27,36,-16,45,-18,-100,-7,-15,9,-18,15,-82,-42,2,-10,-10,31,-27,-10,77,-96,-2,21,30,8,-14,34,-120,-6,29,-68,8,44,-21,-46,65,41,60,26,-24,-127,-11,50,-3,39,41,-7,-28,43,15,-6,45,-7,-5,-12,-18,-17,-29,19,22,43,-53,16,-5,-46,-46,6,11,12,0,34,1,76,-19,-47,-35,-34,-44,57,37,94,-50,1,7,-12, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.039293553680181503, 0.01852300763130188, 0.009944036602973938, 0.010176821611821651, 0.015867438167333603, 0.016977278515696526, 0.018740041181445122, 0.013516286388039589, 0.014106133952736855, 0.011761752888560295, 0.031981710344552994, 0.026661479845643044, 0.017013939097523689, 0.010784896090626717, 0.024994391947984695, 0.020574033260345459, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { -9870, 16139, -30805, -2870, -7221, 8554, 28936, -54694, 2446, 19852, 17181, 16507, -11297, 16786, -7729, 13033, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 0.00092455424601212144, 0.00043583547812886536, 0.00023397733457386494, 0.00023945463181007653, 0.0003733515040948987, 0.00039946538163349032, 0.00044094215263612568, 0.00031803027377463877, 0.00033190904650837183, 0.00027674713055603206, 0.00075251085218042135, 0.00062732893275097013, 0.00040032799006439745, 0.00025376226403750479, 0.00058810337213799357, 0.00048409489681944251, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -42,99,7,-127,-39,-23,-30,-59,-13,13,14,64,10,-56,-22,46, 
  /* [1][0][][] */ -55,23,-59,1,-32,-42,21,-92,55,54,-61,19,-4,7,65,-127, 
  /* [2][0][][] */ 12,9,-36,26,18,9,-34,-55,127,-38,-18,24,8,73,-67,25, 
  /* [3][0][][] */ 56,-79,21,-100,16,-28,-17,-2,113,-16,82,33,-14,66,43,127, 
  /* [4][0][][] */ -75,59,32,49,1,0,-14,56,0,-1,16,-17,-127,-4,-24,27, 
  /* [5][0][][] */ -9,82,127,18,14,67,-96,78,-46,65,-10,-31,29,-41,-116,15, 
  /* [6][0][][] */ 42,-54,109,-127,32,7,-30,96,-59,-95,44,-18,12,82,-34,80, 
  /* [7][0][][] */ 32,125,-29,-65,103,26,-2,-42,127,97,-29,22,21,-22,72,40, 
  /* [8][0][][] */ 13,-80,11,-87,22,-67,21,-73,19,64,63,-13,22,127,91,68, 
  /* [9][0][][] */ 15,-26,3,127,38,-7,55,-60,-48,105,17,-26,-15,-69,-22,-3, 
  /* [10][0][][] */ 2,16,-53,-127,15,2,0,29,30,-25,15,-31,-13,-53,-13,33, 
  /* [11][0][][] */ -1,21,26,-15,83,-24,87,-49,-79,34,-2,30,-1,127,-70,-33, 
  /* [12][0][][] */ 62,-16,-118,8,18,-79,5,21,9,55,-76,-24,-36,127,7,23, 
  /* [13][0][][] */ -21,12,-28,11,10,-127,-7,20,-2,-5,15,-6,9,-16,13,9, 
  /* [14][0][][] */ 29,-24,94,-24,50,-1,-127,-97,2,-57,18,25,2,-65,-3,-36, 
  /* [15][0][][] */ -70,31,-18,-30,-25,4,127,57,-36,55,52,-18,28,54,44,-16, 
  /* [16][0][][] */ 25,56,127,83,-8,24,99,74,-80,15,-77,-1,20,14,0,-75, 
  /* [17][0][][] */ -42,-104,-10,32,-58,-22,-66,14,-127,-24,18,-44,-7,40,56,-38, 
  /* [18][0][][] */ 0,42,1,55,41,10,19,1,60,37,-22,-29,17,127,51,19, 
  /* [19][0][][] */ -5,-49,32,13,100,34,-125,-69,-109,-88,-15,-127,-44,-26,30,-38, 
  /* [20][0][][] */ 79,-45,-55,-40,21,-127,3,14,-63,22,-76,-17,20,11,48,16, 
  /* [21][0][][] */ 75,-21,74,-20,0,0,-10,107,-14,-122,81,27,-8,127,42,95, 
  /* [22][0][][] */ -10,30,-51,127,-56,14,114,74,0,46,-15,53,5,13,4,3, 
  /* [23][0][][] */ 80,4,99,-76,25,-23,-1,59,28,22,-23,9,29,-25,-127,11, 
  /* [24][0][][] */ -127,44,17,-14,-5,96,26,-17,-7,19,89,-17,-64,13,53,-24, 
  /* [25][0][][] */ 29,27,11,30,7,8,68,-53,-2,-127,-15,-19,-8,-30,13,15, 
  /* [26][0][][] */ -39,-3,4,7,-39,-6,-41,-33,-113,-31,3,-35,9,127,-41,56, 
  /* [27][0][][] */ -4,35,14,72,37,-28,-18,-28,61,12,-28,3,12,127,-12,10, 
  /* [28][0][][] */ 12,80,57,61,127,-7,29,50,-102,-27,-51,-28,20,106,51,-36, 
  /* [29][0][][] */ -5,2,14,23,34,3,6,40,-17,-14,-9,-127,-8,-10,-16,1, 
  /* [30][0][][] */ -22,80,-47,74,-34,-19,37,-127,-50,58,-14,-1,54,40,85,84, 
  /* [31][0][][] */ -36,-8,-20,-70,-14,-9,-36,-97,19,85,-20,-127,-22,-59,-3,27, 
  /* [32][0][][] */ -127,-81,-11,63,50,29,-21,2,-8,-43,-97,41,59,-1,83,69, 
  /* [33][0][][] */ -14,-44,-43,-5,-87,-12,-97,4,57,21,17,-42,40,-122,127,30, 
  /* [34][0][][] */ 52,-8,67,22,45,17,-45,84,-78,-47,62,27,20,-5,-22,127, 
  /* [35][0][][] */ -39,49,-75,8,-8,-7,46,-119,91,95,-79,5,0,-13,69,-127, 
  /* [36][0][][] */ -21,34,9,119,2,23,127,17,11,28,-37,-4,-18,19,-53,-59, 
  /* [37][0][][] */ 1,0,20,-64,-2,2,-32,-48,-60,-9,0,-1,0,-127,50,-41, 
  /* [38][0][][] */ 35,83,2,-44,127,-9,39,-38,94,76,-6,-22,14,-21,36,24, 
  /* [39][0][][] */ -27,71,-5,-127,-20,9,-37,37,54,-73,-32,-18,17,70,40,28, 
  /* [40][0][][] */ 9,-21,19,-104,-7,-14,7,-42,-110,-6,-20,-17,0,-127,81,-67, 
  /* [41][0][][] */ -5,-17,-43,-19,6,-36,21,-10,-24,12,-49,-6,-127,7,33,29, 
  /* [42][0][][] */ 127,101,-25,-20,-57,-38,-31,-48,-12,32,97,-75,-73,55,99,-126, 
  /* [43][0][][] */ -5,93,-73,-7,35,-18,127,-39,61,71,-43,1,18,-114,-75,-43, 
  /* [44][0][][] */ -31,-12,15,-37,66,-4,-109,-127,-31,-6,18,1,-8,-33,80,-56, 
  /* [45][0][][] */ -11,29,-127,-43,41,-82,2,-71,-6,22,12,-69,27,-11,80,-10, 
  /* [46][0][][] */ 7,2,-16,-91,-16,13,28,-28,-114,-21,7,12,-7,-127,57,-32, 
  /* [47][0][][] */ 14,52,24,-15,127,-12,-33,16,-57,40,3,18,2,1,111,-28, 
  /* [48][0][][] */ -127,-77,-19,31,79,25,3,-15,-7,-17,-101,34,55,11,77,55, 
  /* [49][0][][] */ 7,20,93,84,114,21,40,42,-126,-48,-25,-84,16,127,13,-51, 
  /* [50][0][][] */ 30,-16,-112,-17,41,-127,-19,-8,-16,-36,2,-53,27,-24,-37,15, 
  /* [51][0][][] */ 1,45,42,18,26,4,7,15,-123,66,5,-127,4,-122,-32,84, 
  /* [52][0][][] */ 12,51,5,73,36,0,31,20,85,97,-49,-58,45,127,73,17, 
  /* [53][0][][] */ -7,-54,-21,-14,-79,-13,-77,3,36,20,11,-39,32,-92,127,22, 
  /* [54][0][][] */ 59,-28,-53,2,127,85,-127,-37,-97,13,-14,-68,7,-37,6,-41, 
  /* [55][0][][] */ 54,2,14,15,40,-55,-95,-127,-41,-80,-81,23,9,-23,20,-9, 
  /* [56][0][][] */ -23,16,26,-17,-3,-24,-105,70,-14,127,5,-15,27,7,1,2, 
  /* [57][0][][] */ 6,7,-58,-31,-49,-52,120,83,-28,32,-12,-3,31,21,127,2, 
  /* [58][0][][] */ 53,25,-127,40,85,98,-22,50,-93,-31,-12,11,-35,16,-14,-41, 
  /* [59][0][][] */ -110,69,107,27,-73,-58,125,127,27,9,35,-14,13,13,56,-4, 
  /* [60][0][][] */ 2,5,-40,1,16,-127,-19,-7,-1,-19,-2,-20,19,-10,9,7, 
  /* [61][0][][] */ 15,-11,20,127,73,12,13,4,-103,0,15,50,-4,18,45,-51, 
  /* [62][0][][] */ -47,127,22,-38,-22,1,-69,65,-17,-54,-75,-46,-6,-87,-59,-44, 
  /* [63][0][][] */ -42,24,-30,127,-69,9,-73,-26,-68,-18,-19,-37,29,72,34,41, 
  /* [64][0][][] */ 8,14,12,33,7,19,-25,61,25,-6,-19,-30,-14,-127,34,-5, 
  /* [65][0][][] */ -7,-47,6,-127,46,-38,75,-34,-3,56,4,-115,-16,0,10,-48, 
  /* [66][0][][] */ 34,-19,69,-23,1,10,8,110,16,-71,49,23,0,127,6,82, 
  /* [67][0][][] */ -3,54,-15,-127,-13,-9,-65,31,79,-93,-32,-13,25,82,88,34, 
  /* [68][0][][] */ -32,40,127,17,6,8,-16,4,-34,-20,-14,-33,8,-14,74,-33, 
  /* [69][0][][] */ 127,82,-28,-1,-96,-35,-32,-49,8,11,105,-61,-80,58,69,-101, 
  /* [70][0][][] */ 46,6,-63,3,-43,31,64,127,-26,98,-47,14,9,61,-33,11, 
  /* [71][0][][] */ 3,-13,-4,7,8,-88,-8,16,-40,8,-75,9,-127,-1,51,58, 
  /* [72][0][][] */ 16,18,-127,15,3,10,36,91,-35,-28,4,-12,17,12,-8,13, 
  /* [73][0][][] */ -56,24,40,10,45,-39,-89,-127,21,-73,37,-16,10,-43,43,-20, 
  /* [74][0][][] */ -5,38,30,121,21,-7,-97,86,-78,17,-43,54,35,-127,45,-94, 
  /* [75][0][][] */ -17,17,-56,11,21,-8,10,-13,105,23,-6,-6,8,127,-34,8, 
  /* [76][0][][] */ 3,-13,-6,17,3,-17,-8,61,20,-29,-24,-127,-1,-9,2,12, 
  /* [77][0][][] */ -15,29,-11,127,-28,30,75,98,3,37,-3,28,-23,-22,-35,-9, 
  /* [78][0][][] */ 18,-3,23,-127,22,-36,-20,44,41,-56,-3,-31,39,117,23,56, 
  /* [79][0][][] */ -16,-107,-84,-73,-85,-17,14,-97,127,11,25,62,17,51,85,-48, 
  /* [80][0][][] */ -18,-20,117,-127,-12,-33,43,-107,-86,60,-65,-103,55,95,95,-43, 
  /* [81][0][][] */ -54,48,-127,28,75,-121,-21,58,-5,-41,67,-4,21,5,14,-6, 
  /* [82][0][][] */ 126,-23,-7,8,15,-127,-19,12,-24,0,-89,-4,106,3,3,30, 
  /* [83][0][][] */ -38,67,-119,-85,-26,-7,44,-125,58,51,-41,-127,5,57,51,104, 
  /* [84][0][][] */ -34,34,72,-40,16,-33,55,-127,-58,55,-9,-67,43,59,73,0, 
  /* [85][0][][] */ -82,127,24,-125,-82,-27,-18,-5,-53,1,-77,22,11,-17,-105,-27, 
  /* [86][0][][] */ -2,-1,-37,-5,-28,-17,127,22,-6,-14,-4,3,6,22,73,-12, 
  /* [87][0][][] */ -21,-44,-2,-118,14,-31,52,-14,-9,18,-10,-127,-19,3,8,-36, 
  /* [88][0][][] */ 121,-55,42,-15,61,-113,-7,51,-84,71,-127,-80,33,43,68,12, 
  /* [89][0][][] */ 32,-31,-50,-52,31,-18,-25,-5,-46,15,36,-49,127,6,33,-42, 
  /* [90][0][][] */ 5,-42,38,-56,55,3,-56,89,63,-76,-41,-13,-4,110,14,-127, 
  /* [91][0][][] */ -51,6,-22,-35,18,-14,-28,-88,5,65,-12,-127,-26,-19,-6,2, 
  /* [92][0][][] */ -29,27,43,20,2,-127,18,0,-1,-27,6,-19,-3,-30,18,-1, 
  /* [93][0][][] */ 30,-21,127,-6,-46,61,26,-30,-26,22,-75,-16,-19,-5,26,7, 
  /* [94][0][][] */ 36,-13,-23,-21,36,-16,-15,-7,-43,-8,12,-60,127,-14,46,-31, 
  /* [95][0][][] */ 127,105,-1,28,-92,-20,-68,-5,-24,-18,92,-43,-40,28,91,-83, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.00077138294000178576, 0.001073252409696579, 0.00093649560585618019, 0.00080410786904394627, 0.00077960232738405466, 0.0011137779802083969, 0.00042245109216310084, 0.0010197742376476526, 0.00063580775167793036, 0.00087606982560828328, 0.00049999932525679469, 0.00058071891544386744, 0.00077704456634819508, 0.0031075745355337858, 0.00049951294204220176, 0.00050946458941325545, 0.0003703314287122339, 0.00088442565174773335, 0.001353293308056891, 0.00092600268544629216, 0.00042622644104994833, 0.0002010723837884143, 0.00035882706288248301, 0.00029004574753344059, 0.00047493484453298151, 0.0016941234935075045, 0.0021804957650601864, 0.00092183053493499756, 0.00058694824110716581, 0.0011149726342409849, 0.00066724623320624232, 0.0007299146382138133, 0.00058674707543104887, 0.00054571055807173252, 0.00080585898831486702, 0.00064503570320084691, 0.00047278011334128678, 0.00060825684340670705, 0.0011416019406169653, 0.00090910645667463541, 0.00039342499803751707, 0.0015262998640537262, 0.00090191623894497752, 0.00057661067694425583, 0.0011195669649168849, 0.00062456377781927586, 0.00073737598722800612, 0.0007310392102226615, 0.00085888168541714549, 0.00061083369655534625, 0.00062702310970053077, 0.00048791925655677915, 0.0013370523229241371, 0.00059361837338656187, 0.0011268050875514746, 0.00082916195970028639, 0.0016701770946383476, 0.00078132370254024863, 0.00089318439131602645, 0.00044109357986599207, 0.0023212344385683537, 0.0013763918541371822, 0.00069668854121118784, 0.001134987804107368, 0.0016448673559352756, 0.0007101738010533154, 0.00022874872956890613, 0.00049342337297275662, 0.00135405408218503, 0.0011767856776714325, 0.00056820170721039176, 0.00073408818570896983, 0.0018512151436880231, 0.00081056897761300206, 0.00091733178123831749, 0.00060659454902634025, 0.00079257972538471222, 0.00028968186234124005, 0.00025802466552704573, 0.00052968866657465696, 0.00045642213081009686, 0.00038590410258620977, 0.00047099843504838645, 0.00058143824571743608, 0.00038253207458183169, 0.00075442850356921554, 0.0016120882937684655, 0.00059277133550494909, 0.00029729868401773274, 0.0014785018283873796, 0.00072631379589438438, 0.00064516393467783928, 0.00068547832779586315, 0.0012581923510879278, 0.00097378721693530679, 0.00058408884797245264, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { -2606, 4729, 8264, 3532, -4380, -4280, 25426, 2224, 2844, -2378, 12811, -495, -10606, 2959, 19932, 7298, 16335, 5305, -4665, -5890, 4683, 43534, 27679, 18643, 1220, 951, 4413, 3759, 2884, -5734, 7144, -3435, -214, 6886, 27, 1295, 13045, 5698, -1743, 6308, 10468, 5481, 5396, 13035, 5536, 5236, 2192, 9586, 5089, -6955, -8248, 655, -342, -1586, 2210, -94, 202, -1078, -5646, 13560, -1047, 1545, -1332, -2232, -3639, 8697, 30638, 2684, -2759, 939, 2306, 2310, 2370, -1643, 601, 11578, -597, 20984, 22813, -1131, 10419, 2727, -626, 1425, 15360, 10246, 4750, 1665, 7656, 4450, -495, -9962, 1050, -2657, -2105, -2278, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00023835207684896886, 0.00033162769977934659, 0.00028937077149748802, 0.00024846385349519551, 0.0002408918080618605, 0.000344149797456339, 0.00013053450675215572, 0.00031510330154560506, 0.00019646027067210525, 0.00027069961652159691, 0.00015449638885911554, 0.00017943819693755358, 0.00024010147899389267, 0.00096021936042234302, 0.00015434609667863697, 0.00015742109098937362, 0.0001144298876170069, 0.00027328150463290513, 0.0004181584226898849, 0.00028612851747311652, 0.00013170106103643775, 6.2129998696036637e-05, 0.00011087511666119099, 8.9622160885483027e-05, 0.00014675162674393505, 0.00052347261225804687, 0.00067375833168625832, 0.0002848393633030355, 0.00018136300786864012, 0.00034451895044185221, 0.00020617454720195383, 0.00022553864982910454, 0.00018130085663869977, 0.00016862084157764912, 0.0002490049519110471, 0.0001993116457015276, 0.00014608583296649158, 0.0001879472256405279, 0.00035274721449241042, 0.00028090769774280488, 0.00012156564480392262, 0.000471616251161322, 0.00027868596953339875, 0.00017816877516452223, 0.00034593857708387077, 0.00019298595725558698, 0.00022784415341448039, 0.00022588613501284271, 0.00026538860402069986, 0.00018874344823416322, 0.00019374587282072753, 0.00015076372073963284, 0.00041314004920423031, 0.00018342403927817941, 0.00034817509003914893, 0.0002562053850851953, 0.00051607337081804872, 0.00024142370966728777, 0.00027598789893090725, 0.0001362949114991352, 0.0007172456244006753, 0.00042529570055194199, 0.00021527201170101762, 0.00035070351441390812, 0.00050825282232835889, 0.0002194388653151691, 7.0681802753824741e-05, 0.00015246446128003299, 0.00041839349432848394, 0.0003636187466327101, 0.00017557045794092119, 0.00022682825510855764, 0.00057201285380870104, 0.00025046028895303607, 0.00028344927704893053, 0.00018743358668871224, 0.0002449017483741045, 8.950972551247105e-05, 7.9727862612344325e-05, 0.00016367019270546734, 0.00014103132707532495, 0.00011924174032174051, 0.00014553530490957201, 0.00017966046289075166, 0.00011819980863947421, 0.00023311327095143497, 0.00049812428187578917, 0.000183162308530882, 9.1863272245973349e-05, 0.00045684698852710426, 0.00022442601039074361, 0.00019935125601477921, 0.00021180813200771809, 0.00038877286715433002, 0.00030089361825957894, 0.0001804794737836346, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 19,64,33,-80,-66,28,0,76,-8,-37,-113,-83,-127,116,-50,68,41,97,15,11,-35,-97,-35,27,108,-114,6,111,60,-81,75,-1,-63,95,36,-57,-25,17,-95,-15,-96,-43,110,-69,75,-14,-80,110,-97,97,-80,27,-24,91,12,60,-53,-79,3,39,-7,94,52,-109,83,-114,-98,53,58,-78,-9,120,-51,47,-33,114,-49,-54,-28,-7,-105,60,75,26,-40,-62,-53,-54,28,44,29,31,-86,-98,-44,61, 
  /* [1][0][][] */ 63,2,69,42,29,-53,0,111,36,32,-71,56,-111,-96,24,-73,-57,-33,-6,-19,93,78,-84,-70,45,2,-33,-64,78,36,-27,-59,-78,-79,-89,-76,30,-61,-38,18,5,105,-8,25,38,2,-38,36,16,-106,2,-41,-17,-103,-51,-92,43,46,93,9,61,-85,-20,-30,127,-12,-3,91,77,85,40,114,-1,38,62,31,62,-71,113,-9,-75,103,-70,80,29,19,-101,36,-56,-65,59,-56,-32,10,30,23, 
  /* [2][0][][] */ -3,-69,-87,-122,-40,12,66,-6,20,-49,-69,-52,64,73,-77,-117,-100,28,-35,27,-97,-57,25,21,-78,63,-48,-52,-29,-22,-89,29,45,-74,44,1,-80,14,-83,63,51,-37,107,76,-71,-22,42,19,-21,-63,4,86,-90,-86,-8,-86,-51,22,76,109,95,75,-61,92,114,88,-79,-85,-2,15,67,-26,31,4,-27,-71,94,112,-107,-77,-94,110,77,30,-78,34,40,29,67,73,78,127,-55,-34,71,75, 
  /* [3][0][][] */ -82,93,57,-93,101,104,74,70,99,20,37,-65,103,38,105,110,-127,70,-58,101,-78,73,-85,-1,105,75,-108,15,52,35,-49,107,-108,24,24,-96,-98,-45,-86,-63,-95,-48,-71,20,-80,-110,-32,-39,-61,103,-16,-105,7,45,99,-73,-91,-108,64,-99,-89,28,-94,-35,10,86,-61,-41,-41,-49,83,-1,85,84,-58,-81,-125,-59,78,-70,54,101,-85,-95,73,-120,94,-96,-40,-115,92,102,-95,-52,30,-45, 
  /* [4][0][][] */ -106,20,85,-15,58,16,-28,-45,16,59,-109,-52,-82,91,27,-108,85,38,-53,-86,-95,78,-121,-29,-36,-123,90,40,11,-126,114,25,-119,40,-53,-56,99,-21,-127,-107,108,96,-109,-107,-22,88,-42,-46,115,-32,117,115,86,-127,-1,39,-117,-26,115,-63,84,-36,-17,74,-67,29,-120,-90,11,95,39,-14,-59,-16,21,-75,-34,86,-43,35,29,-117,57,-5,49,121,10,-69,-31,-14,100,42,94,-14,-109,-121, 
  /* [5][0][][] */ -106,113,-49,-55,35,-20,-48,67,-11,-102,57,40,-97,32,113,110,-121,127,97,-3,118,8,-56,110,-114,48,-37,-63,-29,33,67,-3,-68,73,74,59,107,-61,-58,-42,83,-3,-16,-65,111,122,9,-6,28,114,102,54,-92,-42,55,-35,118,-44,-64,72,66,72,-2,75,80,-60,48,54,104,-66,36,9,-106,94,27,-94,-58,63,34,1,81,118,-93,-49,52,-33,-98,-13,85,114,-37,99,-18,91,7,113, 
  /* [6][0][][] */ 100,2,29,-74,-112,-8,61,-63,12,78,40,127,36,-60,3,101,-29,68,42,52,-77,107,95,57,-60,66,-94,-61,-22,-85,5,39,-89,16,68,90,-60,-24,25,53,-58,42,76,39,-84,69,-61,-11,47,93,9,2,-42,-97,-37,-39,-64,-8,0,82,46,-23,89,-17,109,87,-3,40,-19,-63,-17,-20,64,-52,100,107,-31,64,-28,-67,26,-21,2,-90,76,22,4,102,13,-74,-61,-37,-64,60,78,-78, 
  /* [7][0][][] */ 77,40,-57,-119,99,-26,-34,-65,23,-86,-14,-28,-19,108,97,54,74,-6,-6,55,73,-101,-18,-63,102,-74,53,103,-98,-33,-19,14,-127,-48,63,-38,112,-7,1,-104,-113,36,-60,77,8,-67,-94,-61,58,-50,-37,102,-53,34,59,31,46,-119,-3,-119,16,-81,-52,-62,-10,-60,-114,-102,40,-112,-121,10,-111,67,-41,64,-78,-54,-79,-12,-111,34,3,69,-68,-87,-25,-78,49,112,112,-78,27,-82,86,-116, 
  /* [8][0][][] */ -62,-58,-110,2,55,-2,-19,-104,98,-115,123,-96,-31,-95,-112,-3,18,84,73,-52,105,62,94,-54,-65,-103,19,-102,-79,-84,-99,4,-41,-2,-82,108,-116,-89,-64,-71,-13,32,40,-24,-1,-49,-11,98,70,83,-29,-18,107,20,8,-80,-1,-9,-7,15,-89,-14,-108,93,-36,-29,9,-72,-89,31,-107,60,48,89,113,85,94,-8,-11,-24,42,105,1,64,74,-54,-22,83,63,65,-67,72,-109,98,127,-53, 
  /* [9][0][][] */ -32,-42,18,67,20,49,75,29,5,39,59,52,106,48,-34,-30,-14,-66,-66,-83,-92,72,15,-26,-83,-64,-48,45,57,-114,-37,40,-96,-70,104,-35,-34,-10,-71,-66,92,77,-5,1,31,46,17,-26,-33,-46,-89,-66,-106,16,16,65,-12,-81,3,1,-4,-69,25,67,-127,66,63,58,88,-67,-110,8,38,15,53,-106,97,-70,8,-55,-114,-42,78,-87,49,-71,-92,9,-72,80,29,10,-82,19,22,47, 
  /* [10][0][][] */ -96,47,-84,-107,-50,84,-127,-115,72,-98,86,68,-1,34,72,-7,113,11,-80,34,-15,-65,-44,86,30,111,-34,-31,-114,-76,-15,-111,58,33,106,-119,120,-88,31,114,84,27,31,61,-19,26,-8,-9,-92,119,93,111,103,-109,93,54,15,-19,75,-12,71,64,95,55,-45,107,-3,52,7,-16,75,25,-106,-114,19,58,74,100,79,-4,-4,37,2,26,14,75,-90,26,-15,33,-61,110,51,82,15,-25, 
  /* [11][0][][] */ 74,64,-64,-84,101,2,-41,-84,-83,43,43,-9,-5,-71,55,-78,-113,77,-27,-43,-41,-39,67,-79,-87,90,71,89,7,38,1,36,58,84,-111,-69,12,120,-59,-71,53,-107,109,-108,90,29,-102,-16,53,87,-59,93,55,-74,-37,-88,-7,81,-98,77,-28,7,127,-46,69,-30,94,-4,98,101,-61,27,-88,-34,30,-97,-12,76,-75,-7,-91,-13,-108,89,3,-73,-48,-30,-82,47,-32,-72,89,16,118,20, 
  /* [12][0][][] */ -46,-5,-66,127,18,-33,-48,-37,2,54,-39,38,-28,-90,-40,91,50,-48,85,95,-90,-25,70,52,10,84,-79,7,103,-60,77,79,28,-9,-2,-40,28,-76,95,60,77,77,54,-50,27,-13,-52,79,-86,91,-30,69,4,-84,81,37,25,-64,-76,-75,50,-25,113,-28,-37,-4,7,-34,-92,-83,72,-27,-67,-71,-8,-10,-92,1,76,-36,19,78,86,10,61,-48,11,-71,-67,-80,14,41,-97,-69,-93,96, 
  /* [13][0][][] */ 32,26,71,-66,119,36,26,-79,22,-124,23,6,-18,73,29,65,60,53,-4,93,85,-23,-21,-90,100,-103,1,-81,19,-99,-62,-20,-13,-106,29,-23,49,-116,43,40,-29,-76,61,59,49,-27,43,56,-95,79,-67,-10,-41,-95,-8,74,48,-72,77,-71,-125,-20,82,-36,-78,17,-45,-109,-72,-65,-117,75,-55,-10,101,-37,-30,77,-22,-50,65,40,-31,96,85,-56,-127,56,-76,-69,26,-46,54,79,-44,-73, 
  /* [14][0][][] */ -49,-72,92,62,58,-79,18,-5,-3,63,-33,-69,-11,111,-29,38,-98,-32,-34,-105,-5,39,-56,-41,-43,-24,69,22,76,-97,78,-47,-46,99,127,27,29,79,-79,-98,113,124,119,25,84,-76,0,-49,-115,10,-38,-66,-17,-122,99,-111,32,-90,-28,-107,-96,-106,28,10,2,67,6,-17,-123,-13,39,-66,-105,-80,60,-17,-99,-15,72,5,126,-37,125,38,-82,-66,-66,82,59,-8,-79,-50,-22,-109,-71,-60, 
  /* [15][0][][] */ 18,51,-1,-58,-78,120,16,59,-105,-51,111,-48,-34,-52,-42,-37,-36,103,-126,30,-22,-86,-59,-27,7,-9,110,114,-14,-82,-120,26,72,111,-26,-27,-35,112,-45,-91,-59,125,114,-67,93,60,-77,-85,36,-28,-29,-90,-96,-1,46,21,71,-18,105,-50,-105,-93,-92,-56,-32,35,-14,-77,-6,-74,-98,23,72,59,15,87,-25,103,-103,-27,-22,-59,-40,-57,-48,-41,105,-31,68,-99,-83,93,3,-58,127,-73, 
  /* [16][0][][] */ -11,21,-109,115,86,-68,97,107,-46,45,81,-75,-56,83,-127,-36,30,77,-49,-18,-124,-28,-112,10,107,-73,-85,18,-57,100,109,37,-89,-53,14,9,-20,90,-120,61,43,28,76,-61,-103,-18,-107,-67,-30,45,94,68,-47,-125,55,3,41,91,-50,-70,36,-31,-5,60,-6,28,66,-50,1,-63,70,14,72,-4,45,-90,79,-62,-104,-59,-35,21,-15,-111,91,-71,-6,-118,108,-104,91,-69,44,27,72,-104, 
  /* [17][0][][] */ -26,93,-122,-34,-29,55,-50,114,38,-47,102,-26,-50,106,33,-70,22,87,-39,76,23,-19,-65,-23,-112,3,-40,-83,-49,30,69,-111,74,-40,-36,45,31,-58,-19,43,-44,124,-29,-95,116,24,-86,-97,36,-120,-14,-121,-80,18,52,33,-53,91,-58,-71,113,106,74,93,-48,34,-102,76,-76,-68,3,-18,-40,-34,7,45,-127,-66,115,-103,-64,-2,103,-53,79,34,-50,106,17,127,-41,48,-101,-75,84,-22, 
  /* [18][0][][] */ 66,-115,-113,-9,65,31,-112,-94,-45,42,-83,-75,-4,96,27,37,22,96,-88,-33,-77,55,25,40,28,-27,43,-103,-17,-127,33,-118,-22,87,119,-63,30,-38,-66,-80,-101,30,116,-66,-19,45,98,-54,94,10,-41,-89,-46,1,-22,41,84,27,-98,63,-94,-23,74,115,-13,28,-94,-107,102,-37,-74,95,-95,115,4,119,30,92,-8,-21,-57,-43,-88,96,9,-65,100,19,79,33,-40,101,-94,-18,15,-111, 
  /* [19][0][][] */ 64,62,-106,85,116,86,-62,11,104,-48,5,-44,60,80,119,-47,34,-96,-42,123,-88,-84,27,121,76,-14,32,-28,82,38,113,-119,78,-22,-88,85,-112,-23,-61,21,70,42,50,44,-35,50,-108,108,127,32,88,-25,64,-81,91,114,66,15,-94,-47,-34,66,117,-39,104,-10,-76,93,115,-8,-102,12,18,92,24,95,7,87,-83,124,-107,-51,114,-99,43,14,88,-81,-78,-7,-19,-4,-23,-59,93,-105, 
  /* [20][0][][] */ -4,-93,-19,98,90,20,85,52,-41,-75,22,-4,35,-85,0,-97,-18,-58,110,36,68,-115,97,-25,-112,116,-86,18,3,-80,-51,1,47,104,85,-66,103,15,-104,25,99,-112,-89,-26,45,19,-46,-46,85,-15,127,-85,3,90,24,-89,-64,-120,69,14,-31,90,67,75,29,101,34,-65,31,84,-77,29,-94,-103,-44,119,-9,-93,45,-52,13,105,99,-51,54,14,-69,-118,124,18,-111,-74,65,-41,35,69, 
  /* [21][0][][] */ 69,106,102,-69,-26,-56,-85,-54,5,94,21,-95,-60,-65,-94,-101,-42,5,-87,-12,-29,56,104,-66,109,16,99,-18,-55,-109,112,6,-47,35,96,96,-127,-77,-120,30,9,60,-44,-4,-51,106,-123,81,90,-112,-4,-76,48,-29,-89,-27,-27,-65,92,84,32,-31,-18,104,-62,47,-71,15,12,-58,-26,31,-43,-54,-58,1,-96,100,115,105,-31,117,3,-11,-117,-77,18,34,-41,55,-71,77,-24,-101,123,-26, 
  /* [22][0][][] */ -16,-53,75,-15,-127,-113,101,59,34,3,-13,28,-10,25,-23,-73,-77,-16,-62,55,31,111,1,89,-92,43,-64,55,-39,-48,-61,-75,-77,100,43,39,50,-90,-63,-55,-25,-13,-78,26,54,-46,104,-73,-64,-17,-81,78,-53,87,-20,33,80,72,-101,96,-78,-29,-17,-4,69,-93,-72,-20,34,82,-54,-60,20,70,-89,-1,-85,-66,59,-32,84,-73,-98,-49,43,86,-26,94,17,89,103,23,-105,91,76,54, 
  /* [23][0][][] */ -44,0,11,-31,-85,19,64,18,34,-111,60,-109,-127,89,69,-47,29,49,42,35,58,103,61,-8,59,-58,-68,-64,-101,77,-3,119,97,-62,111,-24,-9,115,82,-79,122,50,102,-109,-94,3,-96,112,35,97,-46,-12,-92,122,80,20,48,3,62,-25,-38,60,89,-108,114,-98,12,-7,101,113,-86,120,105,50,32,-47,-115,17,-95,-9,-107,20,-89,-79,-52,-122,118,-112,-36,-73,-35,-98,13,-69,-62,127, 
  /* [24][0][][] */ -2,88,110,116,38,-59,-95,112,18,-107,-77,88,13,7,-2,-54,-26,52,-74,88,127,-17,-22,33,-23,66,-57,-49,90,92,104,-26,127,-38,-1,-22,6,-36,-70,-75,13,116,-72,37,-35,82,58,-50,-81,-58,31,-25,-63,88,121,-32,68,-32,-9,-23,118,51,38,-8,-121,0,-56,125,45,-73,-24,43,-1,-93,0,-36,19,-57,-21,77,78,-38,65,-41,-71,-69,-8,-49,-71,88,-50,-36,-56,-76,84,124, 
  /* [25][0][][] */ 11,14,25,57,-28,12,-40,51,-41,80,76,72,-57,56,84,-56,22,-37,-51,-41,65,101,18,127,11,-16,-60,-20,76,61,-71,41,-82,-55,98,102,-23,53,-65,92,-58,77,45,74,-18,-67,-59,-76,-32,24,-31,-12,15,-26,-91,-78,0,-21,80,42,-56,83,-63,-23,-66,-47,-40,68,-24,-4,71,25,35,17,-19,27,21,37,45,-82,-67,-9,-20,19,76,56,6,29,-51,88,-23,-5,-12,104,77,25, 
  /* [26][0][][] */ 83,-83,-4,-8,78,-110,102,-39,40,-38,-93,1,-33,-72,35,-27,104,4,-79,-87,42,-55,69,93,-11,-34,44,47,22,-10,-56,-51,-32,45,42,115,-3,90,-127,110,94,2,-32,-103,-11,46,113,9,15,51,94,-29,101,92,57,29,83,-3,-73,-17,10,115,-91,-125,51,-36,-112,-28,-3,-54,28,39,-120,-72,-93,-79,-24,21,-25,56,105,12,-55,-31,-16,-44,-14,-102,23,11,95,109,-52,71,37,-43, 
  /* [27][0][][] */ 50,43,-102,107,-31,-33,4,-9,-91,89,-28,-13,-108,69,76,-44,41,-108,-12,-108,-30,53,81,-85,-104,68,-40,47,83,-52,60,-104,96,-82,30,103,107,51,-85,-42,30,52,-21,60,61,-87,94,-69,-20,-61,56,84,104,48,-117,-95,81,-32,-32,12,25,-74,-105,-93,28,104,24,-95,46,-5,33,-101,21,-68,-4,-76,-76,-1,66,18,-60,-79,74,5,-101,-89,54,-32,99,12,44,127,80,41,50,-98, 
  /* [28][0][][] */ -120,114,-47,82,21,102,-105,-5,66,-74,-100,78,51,-73,22,-100,-73,81,33,102,103,75,9,-88,76,-71,81,115,-52,18,-20,38,-14,21,-32,-58,34,101,-36,120,-92,-24,-5,56,112,111,-15,8,117,6,-113,7,58,-36,31,70,107,48,53,84,52,-25,8,-107,-72,-6,90,-43,-80,63,62,117,-108,63,127,30,63,-44,-10,84,-68,70,64,-25,55,13,-77,-61,-93,20,84,-103,53,41,-7,111, 
  /* [29][0][][] */ 21,-26,33,22,-34,2,19,-119,-59,-37,-57,-87,70,-21,-87,-27,89,91,-73,97,30,-73,-92,-96,86,-69,-106,-53,-49,90,-69,23,-107,115,107,-2,-31,-101,24,-31,110,-58,-25,31,-90,63,-122,-1,-39,72,23,42,-84,-19,84,89,39,-20,-66,5,119,101,-80,36,75,-87,-124,39,67,-15,-35,-55,-28,-127,-31,-101,-64,29,-3,65,-9,-44,29,-30,20,-123,-71,91,-18,35,-73,-60,-108,-15,-68,-71, 
  /* [30][0][][] */ -78,-98,-88,-50,65,97,54,5,-71,29,29,61,84,55,-104,-113,92,114,75,10,-10,-76,118,-74,18,52,-26,12,80,-49,7,46,2,-31,28,19,-88,-33,85,-22,-9,-93,-72,-90,82,116,-35,-32,-65,109,-96,-40,-112,-19,99,-99,103,53,5,-6,-49,-105,46,82,104,97,28,65,88,77,109,-79,32,-112,-87,21,58,-29,-6,-39,50,51,100,41,79,-60,62,41,107,38,53,-127,9,63,-65,-70, 
  /* [31][0][][] */ 47,123,74,-40,-72,-13,99,-85,-86,-44,63,-62,-70,-83,94,23,-5,47,-24,23,-26,-40,98,9,63,94,-41,-60,-20,83,58,70,68,34,55,106,52,110,-21,-82,-4,103,-92,43,26,101,47,-10,-110,-27,-57,62,26,-89,-19,-11,-1,31,24,116,-9,-127,111,-111,18,-90,79,-66,-114,32,116,-35,74,-72,-45,60,-6,86,56,-83,-4,-18,-115,-80,-29,81,119,-103,-69,86,38,-4,-53,-24,-118,62, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0018369312165305018, 0.0019609290175139904, 0.0018000544514507055, 0.0017948888707906008, 0.0017319257603958249, 0.0017682197503745556, 0.0021932669915258884, 0.0017782663926482201, 0.0018335628556087613, 0.0018702946836128831, 0.0017237878637388349, 0.0017946736188605428, 0.0021004742011427879, 0.0019321462605148554, 0.001706982497125864, 0.0017934397328644991, 0.0017577838152647018, 0.0017083650454878807, 0.001784316380508244, 0.0017022598767653108, 0.0017964324215427041, 0.001797353383153677, 0.0021629156544804573, 0.0017663449980318546, 0.0018649509875103831, 0.0024885158054530621, 0.0017740065231919289, 0.001927729113958776, 0.0018386411247774959, 0.0017689382657408714, 0.0018207009416073561, 0.0017686469946056604, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { 96, 42, -289, -373, 27, 34, 1034, -324, 82, -330, -123, 86, 308, -418, 26, 98, -343, 35, 74, 42, -80, -330, 594, 66, 113, 1282, -171, 37, 11, -183, 89, -66, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.3221913074376062e-05, 4.6139506594045088e-05, 4.2354222387075424e-05, 4.2232681153109297e-05, 4.0751194319454953e-05, 4.1605169826652855e-05, 5.1606282795546576e-05, 4.1841562051558867e-05, 4.3142656068084762e-05, 4.4006934331264347e-05, 4.0559716580901295e-05, 4.2227617086609825e-05, 4.9422924348618835e-05, 4.5462264097295702e-05, 4.0164293750422075e-05, 4.2198582377750427e-05, 4.1359620809089392e-05, 4.0196824556915089e-05, 4.1983916162280366e-05, 4.0053175325738266e-05, 4.2268999095540494e-05, 4.2290666897315532e-05, 5.0892133003799245e-05, 4.1561059333616868e-05, 4.388120214571245e-05, 5.8553312555886805e-05, 4.1741332097444683e-05, 4.5358334318734705e-05, 4.3262145482003689e-05, 4.1622079152148217e-05, 4.2840023525059223e-05, 4.1615225200075656e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -67,-14,-39,-43,63,-9,127,-6,5,-71,-75,-66,77,-21,81,-43,-78,-7,44,4,75,-34,93,-60,-52,107,9,-78,-77,-70,6,22, 
  /* [1][0][][] */ 93,127,-86,-72,16,100,-10,-50,74,-98,-89,54,-63,4,32,86,-86,98,101,74,-68,1,-16,50,107,-19,-79,-90,63,87,113,-111, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.00434067752212286, 0.0034440502058714628, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 30013, -37669, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00018033494416158646, 0.00014308425306808203, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.4744049608707428, } };
const TfArray<1, int> quant46_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.37106996774673462, } };
const TfArray<1, int> quant50_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.43895429372787476, } };
const TfArray<1, int> quant53_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.46264147758483887, } };
const TfArray<1, int> quant54_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.29124167561531067, } };
const TfArray<1, int> quant58_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.2293640673160553, } };
const TfArray<1, int> quant61_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.27759185433387756, } };
const TfArray<1, int> quant62_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.18526272475719452, } };
const TfArray<1, int> quant65_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.30899319052696228, } };
const TfArray<1, int> quant66_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.04154534637928009, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.093484990298748016, } };
const TfArray<1, int> quant69_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 71;
  for(size_t i = 0; i < 71; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 27; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
